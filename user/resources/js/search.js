window.__DOCS_SEARCH__ = [[{"l":"User Documentation","p":["Logo","Welcome to the BDeploy User Documentation. This documentation is intended for end users, not for developers. Find the current developer documentation here.","Copyright© SSI Schäfer Software Development GmbH"]}],[{"l":"Introduction","p":["BDeploy is a fast, reliable and configurable deployment solution for any type of application. It features an easy to use and flexible user interface on top of a distributed storage.","You can visit the official homepage https://bdeploy.io to get the latest release as well as more information about all features that make BDeploy unique."]}],[{"l":"Key Features","p":["Angular UI The Angular-based Web UI provides all means for easy configuration and deployment of your products and applications.","Powerful Storage The storage backend provides data de-duplication in a high performance, distributed, delta-based storage network.","Performance BDeploy uses a delta-transfer mechanics to provide minimal updates throughout a whole network of nodes participating in deployments.","Ease of Use BDeploy's declarative nature makes it easy to define applications, products and everything around them.","Decentralized BDeploy is by nature decentralized. A CENTRAL variant of the BDeploy server provides a centralized UI for decentralized setups.","Flexible Installations By using a flexible mix of NODE, MANAGED and CENTRAL servers, many different deployment scenarios involving multiple locations and physical or virtual machines are possible."]}],[{"l":"Terms","p":["A Build represents the immutable collection of all runtime artifacts (binary files, configuration files, templates etc.) of a Product. As a Build is immutable, the build tool (e.g. Maven, Gradle, Eclipse, etc.) creates a new one on every execution.","A part of a Product that can be started and stopped separately. Applications either run as a Process on a server machine or as a Client Application on an end user device.","A piece of software that can be deployed with BDeploy. A product is a bundle of Applications along with some meta-information.","A Product Version represents a Build that is marked with a Tag.","A server machine (virtual machine or bare metal) that is used in an Instance to run the configured Processes on it. BDeploy supports Windows and Linux nodes. They may even be mixed within one Instance.","A server-side Application that is configured to be started on one of the server Nodes of an Instance.","A System is a bracket around multiple Instances using potentially different Products. A System is a logical group of individual pieces of deployed software.","A Tag identifies a Product Version. The structure of a tag is defined by the Product itself. The only obligation is that a tag has to be unique for different Builds of the same Product.","Activation","Agent process provided by BDeploy that has to run on every physical node used by BDeploy. In a multi-node setup one minion takes the role of a master.","An Application that can be distributed on end user devices.","An Instance Group is the main top-level element used in BDeploy. As the name suggests, it provides a grouping of Instances.","An Instance is the actual deployment configuration of a Product. In one instance, the Applications of a Product can be distributed as Processes on one or more Nodes. The Product(and it's Applications) describes the possible configuration values (e.g. configuration files, command line parameters, etc.) - the Instance provides actual values for these.","An Instance Version describes the configuration state of an Instance at a given time. Each change that is done by the user results in a new instance version. Versions are immutable and cannot be changed. Each new change results in a new version of an Instance.","Application","BDeploy has some important terms and concepts which should be known before diving into the details of the application itself. These terms will be used all over the documentation to cross-reference other parts of the application.","Build","Client Application","Deployment","Installation","Instance","Instance Group","Instance Version","Meaning","Minion","Node","Process","Process Control","Product","Product Version","System","Tag","Term","The Activation marks a previously installed Instance Version as the one to be started by the Process Control. Only one instance version can be active for one instance at the same time.","The Process Control is responsible for starting, keep-alive and stopping the Processes of the active Instance Version.","The process of getting one Instance Version up and running. This includes the major process steps: Installation, Activation, Process Control.","The process of transferring the configured Processes of an Instance Version to all Nodes of that Instance. The Installation makes this Instance Version available for its Activation."]}],[{"l":"Installation","p":["This chapter guides you through the installation of BDeploy. At the end you will have the backend and the frontend up and running so that you can start deploying your applications.","The source distribution of BDeploy contains a demo server that can be started with ./gradlew runDemoServer. The example data is reinitialized with each server start."]}],[{"l":"Download","p":["The latest and greatest BDeploy version can be downloaded on the official Github page: https://github.com/bdeployteam/bdeploy/releases","Extract the BDeploy binaries from the distribution ZIP. There are no requirements regarding the location of the binaries. The target of the unpack will contain a bin/bdeploy or bin/bdeploy.bat depending on whether the distribution is built for Linux( bdeploy-linux64-X.Y.Z.zip) or Windows( bdeploy-win64-X.Y.Z.zip).","For easier handling, make sure the unzipped 'bin' folder is on the PATH. The rest of the manual assumes you have done this. If you decide to omit this step you will have to prefix all commands with the correct path to the binaries."]}],[{"l":"Update of existing Installations","p":["In case you already have an existing installation of BDeploy, you can easily update this installation. An update can be performed in two different ways: through the command line (even remotely) or through the Web UI.","For more information about the Web UI, please see BDeploy Update.","To remotely update an existing server, use a command similar to the following:","Updating a local server through the command line is done in the same way.","Existing nodes don't need a separate update. They need to be online when applying the update to the master. The update is applied to all online nodes as well when applying it to the master."]}],[{"l":"Master"},{"l":"Modes of Operation","p":["A BDeploy master which is controlled by a CENTRAL BDeploy master. The MANAGED master can still be used nearly the same as the STANDALONE master, with very few restrictions. A MANAGED master can additionally be controlled indirectly through the attached CENTRAL master","A node which can be attached to either a STANDALONE or MANAGED server as additional target location to run applications on.","A standalone BDeploy master which is responsible for itself, its nodes, and every application deployed thereon.","Allows a central BDeploy master to control and manage multiple MANAGED masters. The CENTRAL master itself has no local deployment capabilities. Its purpose is exclusively to control other masters. Other than that, from a users perspective, the server handles mostly like a STANDALONE or MANAGED master.","BDeploy may be set up in different modes, making a few different overall usage scenarios possible:","BDeploy's CENTRAL mode is built in a way that attached MANAGED servers can have an alternate URL, making it possible to manage servers which are known under different names in the local network (e.g. VPN/NAT, alternate DNS, etc.).","CENTRAL","CENTRAL/MANAGED Deployment Scenario","Compared to the rather straightforward standalone scenario above, a CENTRAL and MANAGED server setup allows for more flexibility, while being manageable through a single Web UI:","Function","MANAGED","Mode","NODE","See Central/Managed Specific Configuration for more details.","STANDALONE","STANDALONE Deployment Scenario","You can still manage every MANAGED server directly through its own Web UI. Creation of new Instance Groups is restricted to the CENTRAL Web UI though."]},{"l":"Initialization","p":["To start using BDeploy you will at least need a single master. The master needs to be initialized before it can be started.","The root directory contains all the runtime data. It is adviseable to select an empty directory in the data area of your system (e.g. /var/bdeploy on Linux) that is intended exclusively for this purpose. Keep the root directory separate from the BDeploy binary installation. Make sure that there is enough space available.","A STANDALONE master can be initialized like this:","It is possible to append --logData=<path> to the init command to set an external directory that will be useable via variable expansion of P:LOG_DATA. See Variable Expansions for further details.","The root/data directory should be outside of the BDeploy installation. When updating BDeploy it replaces files in the installation folder, and you do not want to accidentally touch the root directory. Those are separate things.","The init command will create the initial administrator user from the --initUser and --initPassword parameters. This user has full administrative privileges. You can use the bdeploy login command to authorize all other CLI commands for your user.","Make sure to choose a secure password!","The init command will write an access token to a file if given with --tokenFile. The main purpose of this tokens is automation (scripting) and testing. The token is a system token which is not associated with any actual user. This token is important when initializing a root for a NODE, as it will be required when attaching the NODE to a STANDALONE or MANAGED master. On the master you can generate a token for any user from the BDeploy UI anytime later on.","The --mode parameter of the init command is used to determine the future purpose of the BDeploy root. The mode can be STANDALONE, MANAGED, CENTRAL or NODE(also see Node).","It is not recommended ( but possible) to change the mode of an initialized root retroactively, so take care to use the correct mode for the intended use.","The result of the init command is a root directory which can be used by the start command.","Be aware that the user running the start command later on must be the owner of the root directory. Otherwise BDeploy will run into problems when accessing files. If you configure BDeploy as a service make sure to either run the service as the same user who initialized the root directory, or pass ownership of the root directory to the user running the service before starting it."]},{"l":"Launch","p":["After the initialization - which needs to be done only once - the master can be started with the following command:","This will start the master server which also hosts the Web UI: https://localhost:7701","The server is using a self-signed certificate by default. Thus you need to instruct your browser to accept it. See Custom Certificate for instructions on how to provide a better certificate."]},{"l":"User","p":["Only authenticated users have access to the Web UI. The initial user has been created by the init command. Use this user to log in to the Web UI and create additional users (or provide external authentication mechanisms) from the User Accounts administration page."]},{"l":"Sessions","p":["The Web UI uses timed sessions for authenticated users. Sessions follow these rules:","A user must be 'active' (i.e. visiting the BDeploy Web UI in some way) within a configurable timeframe, by default 24 hours. Otherwise, the session is timed out.","A session times out latest after a configurable session timeout, by default 7 days.","Active sessions are stored on disc every 5 minutes. Sessions are not guaranteed to be deemed active after a server restart, but will be in most cases. A forced server shutdown will not write currently active sessions (e.g. kill -9).","The bdeploy config command can be used to modify the timeout values."]}],[{"l":"Custom Certificate","p":["By default BDeploy uses a self signed certificate for both TLS (HTTPS) traffic encryption as well as token issuing. Tokens can be issued on the command line and from the user menu in the Web UI. These tokens are used to authenticate and authorize any actions performed remotely (command line, third party software, Web UI, client application launcher, etc.).","You can use the certificate tool to re-generate the internal certificate to intentionally invalidate all tokens and logins, or (which is the more common use case), you can set or update a dedicated HTTPS certificate which is then used to secure HTTPS communication only, but keep all issued tokens intact. Also tokens issued in the future will keep their validity when a custom HTTPS certificate is in use and updated later.","In case this is no longer wanted, you can revert to use the self-signed certificate for HTTPS as well again, by using the --removeHttps switch:","By re-generating the certificate that BDeploy uses, all existing tokens will lose their validity.","The bdeploy certificate command also offers commands to re-generate the internal certificate (--regenerate), revert changes to both types of certificates (--revert, --revertHttps), export certificates (--export, --exportHttps) and re-generate master tokens in case they are lost (--exportToken)."]}],[{"l":"Nodes","p":["Nodes are optional and only required in the case that the application that you want to deploy should run on different servers but be managed from a certain master. By default a master is itself a node as well where applications can be deployed to.","Please note that nodes are not available on CENTRAL servers as they do not support this feature."]},{"l":"Initialization","p":["Nodes must be initialized on the corresponding machines (or on the same machine using non-default ports; the default port is 7701). The command is similar to the one used to initialize the master. Pass (for example) --port=7702 to change the default port to some other value to avoid conflicts. Running multiple BDeploy nodes on the same machine is supported for testing, but not recommended for productive setups (as the master can be deployed to directly anyway - no need for an explicit node).","Note the --nodeIdentFile parameter given to the init command: this file is created during init, and will contain the required access information for this node. You need it to register the node with the master, so make sure you will have it available when doing so."]},{"l":"Launch","p":["After the initialization - which only has to be done once - the node can be started with the following command:"]},{"l":"Administration","p":["To register, remove or manage a node on the master you can either use the command line interface or the administrative web UI on the master."]},{"l":"Command Line Interface","p":["Use the CLI to register, remove and manage a node on the master(see the bdeploy remote-node --help command for more information).","Both the https(note the s) prefix and the /api suffix are required in all BDeploy URIs.","The node is now registered as 'node-name'. This is the name which is reported when querying nodes from the master. This is also the name displayed when configuring applications to run on certain nodes later on."]},{"l":"Administrative Web UI","p":["The administrative Web UI provides the ability to add, remove, repair, and otherwise manage nodes.","Node Administration","To add a new node, click the Add Node... button. In the resulting panel you can drag and drop the node-ident.txt file created during the initialization step. This will prefill the panel with the required information. You can change node-name and URI according to your needs before saving.","Add Node","In case you do not have the node-ident.txt file to drop to the drop zone, you can also drag the content of the file as plain text to the drop zone - this has the same effect.","When editing an existing node by selecting it in the list, you can also drop the same node-ident.txt file to update the information. This way you can create nodes before they actually exist - using a dummy URI and authentication - and later on update the node administration with the actual configuration. This allows to configure instances to their future nodes without them existing yet."]},{"l":"Replacing and Restoring Nodes","p":["BDeploy supports replacing and restoring nodes. This is primarily meant to restore nodes after a catastrophic failure of the node in question. This feature is capable of reinstalling all required node configurations of all instances which are/were deployed on the node.","Replacing can be performed via the Administrative Web UI, much the same as editing a node. The steps to replace a node are:","Find the node in the Administrative Web UI and click it to open the node details panel.","In the panel, click [Replace...]. This will bring up the Replace Node panel.","Initialize the new node on the target system. This can be done at any time up until now in preparation.","Drag & drop the node-ident.txt file to the drop zone in the Replace Node panel. The URI and authentication information will be prefilled.","Click the [Save] button. The panel will enter loading state. You can follow the progress of the operation in the Activities panel from the main menu.","Once the operation completes, you will be brought back to the node details panel.","Replacing and restoring has been performed and all instances which use this node are available again."]},{"i":"convertmigrate-to-node","l":"Convert/Migrate to Node","p":["Existing STANDALONE and MANAGED servers can be migrated to type NODE. This can be handy if software needs to run standalone on a NODE before the actual master server is available. In this case, setup a STANDALONE server on the node, configure all the required software, and migrate the server to NODE type later.","To convert an existing server:","Open the Administrative Web UI on both servers in separate browser tabs.","On the new master server, click [Add Node...] in the toolbar to bring up the Add Node panel.","On the to-be-migrated server, click the master node in the list of nodes. Click the [Convert to Node...] button.","Now drag the yellow node identification card from the to-be-migrated server to the new masters drop zone.","Information about the server is pre-filled in the form. Double check the information and press [Save] to start the migration.","You will be prompted to confirm the migration. Click [Migrate] to continue.","Node Conversion","After the migration is complete, the server will be available as a NODE on the new master server. All the Instances have been migrated to the new master server.","During migration all Instances are modified in a way such that software still runs on the same physical hardware as before, i.e. the now-new master server is not participating in any of the Instances configuration. Instead, the previously-master, now-node server is still configured as deployment target where this was the case previously.","If the to-be-migrated server has nodes attached to it, all those nodes will be attached to the new master after migration."]}],[{"l":"Service"},{"l":"Linux","p":["The bdeploy-linux64-X.Y.Z.zip package contains a template file from which a systemd service can be created. It is located in the etc directory and named bdeploy-minion.service.","The template itself contains instructions on how to create a valid service from it.","You can copy the service template to a different filename while installing it into the systemd service directory. The filename will later on be the service name. This allows installing multiple BDeploy services on a single machine.","To get systemd to recognize the service(s) after copying the service file(s) use the systemctl daemon-reload command (as root). Once installed, you can control the service using systemctl."]},{"l":"Windows","p":["The bdeploy-win64-X.Y.Z.zip package contains a batch script to create a new Windows service. The script is located in the etc directory and is named bdeploy-service-install.bat","The script must be called with administrative privileges and it expects the following arguments:","--master | --node","Start a master or node (only controls the name of the service).","<\\path\\to\\minion\\batch.bat>","Absolute path to the bdeploy batch file inside of a full BDeploy installation. Sample: C:\\BDeploy\\server\\bin\\bdeploy.bat","<\\path\\to\\root>","Absolute path to the root directory. Make sure to not include a trailing backslash. Sample: C:\\BDeploy\\data. Note that this is the same directory you specified as --root on init","By default the service runs as Local System but you can and should change that afterwards by using the services.msc application. Configure the desired account in the Log On tab of the services management console. We strongly recommend to use a non-privileged user to run the BDeploy service.","Once installed, you can start the service using services.msc or by calling net start BDeployMaster|BDeployNode.","Use the Event Viewer(Windows Logs->System) to get more information when the service fails to start.","Application logs (stdout, stderror) are written to a log file that is stored in \\path\\to\\store\\files\\log\\service.log.","The service parameters are stored in the Windows registry: HKLM\\SYSTEM\\CurrentControlSet\\Services\\BDeployMaster","You need to modify the batch script when you want to create multiple services on the same machine. Simply adopt the MINION_SERVICE_PREFIX to use another prefix for the service."]}],[{"l":"Verify Setup","p":["Make sure that all BDeploy services are running on the corresponding physical nodes by starting the created services or by starting them manually. To verify that the setup is OK, run on the master:","This will produce output similar to the following:","If any of the nodes is marked offline, the according minion on the respective node is not reachable from the master node.","bdeploy login will prompt for user and password, create a local session, and use that session on subsequent commands. This login session will keep validity until removed using e.g. bdeploy login --remove=server-name. The active login can be set using bdeploy login --use=login-name(to set the default permanently) or individually/temporary per command using the --useLogin=login-name option."]}],[{"l":"Getting Started","p":["This chapter provides an overview of all parts of the BDeploy user interface."]}],[{"l":"Login","p":["Each user needs to authenticate with a username and password in order to get access to all parts of the system. There is no \"guest\"-mode. An anonymous access is not available.","BDeploy Login","After a successful login, the main page is shown with all Instance Groups that the user is permitted to see - either through global or scoped permission.","The main menu - which is always present on the left side of the screen - can be expanded using the hamburger button. This will provide a more readable version of the main menu. The content of the main menu depends on the current application context. This means that items will be added whenever more context is available (e.g. when clicking on an instance group) and removed when leaving this context.","BDeploy Main Menu","Clicking on the user menu in the top-right corner provides access to various user related actions and information.","BDeploy User Settings","Users which are authenticated against an external system (e.g. LDAP) are unable to edit their user information (including password) through the user menu. Updates have to be performed on the controlling system (e.g. LDAP server) in this case."]}],[{"l":"Common UI Elements","p":["BDeploy tries to follow a few simple patterns regarding UI/UX. The common parts of the UI, which are the same for nearly all pages, are described in this section."]},{"l":"Search Bar","p":["The search bar at the top of the screen can be used to search in the current page. It will filter all tables and lists in the current page, regardless of where the table is located.","The search bar might be disabled if no elements on the current screen can be filtered.","Disabled Search Bar"]},{"l":"Panel","p":["The panel is the area on the right side of the screen which typically contains details related to the content in the main area. This panel is hidden by default and slides into view whenever necessarry. This is typically triggered by clicking an entry in a table or a toolbar button. An example for a panel is the Add Instance Group panel, which will also be one of the first panels you'll see in the application."]},{"l":"Table vs. Card View","p":["A lot of tables throughout the BDeploy UI offer the possibility to display them as cards instead of as a list. This is done by clicking the corresponding button in the toolbar of each dialog.","Table Mode","Card Mode"]},{"l":"Grouping","p":["Most tables offer the possibility to group the entries by a certain criteria. The criteria may be predefined or freely configurable, depending on the type of data in the table. Grouping can be changed using the Data Grouping toolbar button.","Data Grouping","Groups are represented as collapsable sections in the table. Multiple levels of grouping are supported in table mode. Press the [+] button to add an additional level of grouping and choose a criteria to group. Pressing the [-] button will remove the last level of grouping.","The Save preset button will save the current data grouping settings as preset in the browser storage. This will be the default grouping settings whenever you open the same page again.","Grouping works differently in Card Mode. Only one level of grouping is supported in card mode, and groups are displayed as tabs instead of sections."]},{"l":"Deep Links","p":["This not actually a visible element of the BDeploy UI, but a feature you can use when sharing links with colleagues. All locations in BDeploy are deep-link capable, meaning you can copy the current URL from the browser and send it to somebody else. When opened, the other Browser will see exactly the same page as you do, including the currently open panel."]}],[{"l":"Instance Group","p":["An Instance Group acts as a logical container for Instances. It typically contains several Instances for different purposes (productive, test, development). Adding them to the same group provides a better overview over which of them belong together. An empty page is displayed if no instance group has been created.","Empty Instance Group Overview","Use the [+] button in the toolbar to create a new Instance Group.","Create Instance Group","The name of an instance group cannot be changed after its creation. It is used internally as a name in the file system on the server. Be careful when choosing the name.","The Automatic Cleanup option helps to reduce the amount of consumed hard disk space. There is a high likelyhood of new versions of a Product being deployed during the lifetime of an Instance Group. To avoid the hard disk being filled up with product versions that are not used anymore, there is an option to activate an automatic cleanup job. If the option Automatic Cleanup is enabled, old product versions that are no longer in use by Instances of this Instance Group are deleted automatically. To avoid that a Product vanishes completely, the newest product version always remains."]},{"l":"Instance Group Dialog","p":["All Instance Groups that are visible to the user (as per the assigned permissions) are shown in the Instance Groups dialog.","Demo Instance Group"]},{"l":"Instance Group Access","p":["A new Instance Group is initially only visible to users with global read permission (or higher). You can assign permissions to users either globally, or per Instance Group. To assign local permissions, click the Instance Group to get to its instance overview and then click the [Group Settings] toolbar button. The Group Settings panel is shown.","Instance Group Settings","Click the [Instance Group Permissions] button to navigate to the permissions panel.","Instance Group Permissions","To assign a local permission to an existing user, click the [Modify] button in the according table row. A dialog will pop up asking for the permission to assign. Choose an apropriate one and click [OK].","Instance Group Permission Assignment","The local permission will be shown next to the global permission. The highest available permission level is taken into account for any permission checks.","Instance Group Local Permission","The user table is grouped by permission assignment, either global, local or unassigned.","You can make Instance Group public by assigning local READ permission to All Users Group."]},{"l":"Initial Steps","p":["Click on an Instance Group to open the Instance Browser of this group. Here you can see all Instances grouped by their purpose(can be Development, Test or Productive).","Empty Instance Browser","Since an Instance requires a Product, an empty Instance Group will initially display a shortcut to the products page. If there is at least one Product available already, the shortcut changes to help you to create a new instance.","Empty Instance Browser with Product available"]},{"l":"Manage Products","p":["Products can be obtained by building a Product or by downloading an existing version from another Instance Group on the same or another BDeploy server, using the [Download] button on the Product details panel.","On the BDeploy Releases page you will find some sample products to experiment with for each release, see https://github.com/bdeployteam/bdeploy/releases","Empty Products Page","On the Products page, click the [Upload Product] button to upload new Products.","Upload Product Panel","Click browse and choose a Product ZIP file to upload, or simply drop one on the highlighted drop zone. The Product will be uploaded.","Successfully Uploaded Product","Once a Product is available, you can click it to open the Product details panel. This panel allows you to [Download] a Product version as ZIP, or [Delete] individual versions of the Product as long as it is not currently in use by an Instance version. There rest of the panel provides additional information about the Product.","Product Details Panel"]},{"l":"Create new Instances","p":["To create a new Instance, click the [+]. After giving the new Instance a name, purpose and description, the most important thing is to select the Product you want to deploy. Additionally, the initial product version has to be chosen. It can be changed later at any time ( up- and downgrade).","Create a new Instance","It is a common requirement that certain processes of an Instance should be automatically started whenever the BDeploy server itself is started. This can be configured via the Automatic Startup flag of the Instance.","The Instance determines whether it is included in the automatic cleanup job. If the option Automatic Uninstallation is enabled, the cleanup job will uninstall all instance versions that are older than the activated and the previously activated instance version. Due to this automatic uninstallation some of the old product versions might become unused. If the option Automatic Cleanup is activated on the instance group, these unused product versions are also deleted (see Instance Group).","Click an Instance to proceed to the Instance Dashboard.","Instance Browser"]},{"l":"Global Attributes on Instance Groups","p":["Global Attributes can be configured - as the name suggests - globally in the system administration. Each Instance Group may then associate a value with each of these global attributes.","Set Global Attribute Values","The value can then be used for grouping Instance Groups through the grouping panel.","Group by Global Attribute"]},{"l":"Instance Group Attributes","p":["Similarly to the global attributes, each Instance Group may have its own attributes. These attributes are not global - they are only visible within the Instance Group. Each Instance can assign a value to each of these attributes. Again, similarly to the Instance Group browser, the Instance browser can use the assigned values to group Instances by those values.","The attributes are defined in the Instance Group settings. The values are assigned in the Instance settings."]},{"l":"Bulk Manipulation and Control","p":["Instances can be manipulated and controlled in batches from the Instance Browser. Click the [Bulk Manipulation] button in the toolbar. This will open the Bulk Instance Manipulation panel to the right. Instances can now be selected in the main content area by checking the checkboxes at the beginning of their row in the table.","Bulk Instance Manipulation Panel and Selection","Once a set of instances has been selected, the available actions can be performed on all of them. All actions (except for start/stop) will show a result after being performed. Start/stop will not show a result, as they will just trigger start/stop on instances. Depending on their configuration it may not be possible to show a result.","Result of Bulk Operation"]},{"l":"Systems","p":["Systems are a means of further grouping instances of different products inside a single Instance Group. Systems also provide a way to apply shared configuration through System Variables.","Once created, a System can be used by an Instance by configuring the in-use System in the Instance Configuration of each Instance which should participate in this particular System.","A System definition may be used by many Instances, but each Instance can only be part of one System(or none)."]},{"l":"System Variables","p":["System Variables can be configured on Systems. Those variables can then be referenced by other Link Expressions(process parameters, endpoint configuration, instance variables, configuration files)."]},{"l":"System Templates","p":["A System Template allows definition of complete systems. Since those templates live outside of any specific single product, they are single YAML files which have a separate lifecycle.","A System Template will typically create multiple instances of multiple products in a to-be-created system. It can also create System Variables, and use template variable overrides to precisely control how instances are created.","System Template Wizard - System Template","The System Template Wizard will request you to upload a system-template.yaml file. Once this is done, you can specify template variable values for variables defined and used in the system template itself. These are not to be confused with template variables used in instance templates, which will be queried at a later stage in the process (if necessary). System Templates can use template variables in their own YAML descriptor to provide very dynamic (pre-)configuration for instance templates, thus those variables need to be available before configuring instance templates.","System Template Wizard - Instance Configuration","The Wizard will now query each instance defined in the System Template. This allows users to skip instances, or configure intances in a way just \"as if\" they would apply the individual Instance Templates to a new, empty instance each.","System Template Wizard - Result","Once done, the Wizard will show success confirmations along with potential warnings and errors that occured during application of the template(s)."]}],[{"l":"Instances"},{"l":"Instance Dashboard","p":["The Instance Dashboard is the central location for managing an instance. It provides an overview about all configured Processes and on which nodes they are running. Each Process is represented by an entry on the respective node.","If the instance has no active version yet, the dashboard is empty and shows a shortcut to the Instance Configuration instead.","Instances in BDeploy need to be configured, installed and activated. Once configured, the instance can be installed and activated either directly from the dashboard or by using the Instance History page.","Empty Instance Dashboard","Once the instance has been configured, installed and activated, the dashboard shows an overview of all available nodes, their respective state (CPU Usage, Load Average where available) and the Processes configured on them.","For more information, see Process Control."]},{"l":"Instance Configuration","p":["The first step is to select the desired and required nodes used in the instance. The master node is enabled by default, the virtual Client Applications node is always present if client applications exist in the product. Additional nodes can be selected from the Instance Settings's Manage Nodes section.","Manage Nodes","Next up, you can assign processes to nodes by selecting applications from the node's [Add Application...] toolbar button.","Add Processes","The panel will display all applications along with their process templates if available. You can click the [Add] button to add a new, unconfigured process to the node. Using the [Add template] button, you can add a new process from a template, which typically includes a complete configuration of the selected application, see Application Templates for more information.","In any case, the process will appear in the selected node. You can use drag & drop to re-order processes within a node. The order of the processes is relevant - please see Process Control Groups for details.","New Process","The virtual Client Application Node is not available if the product does not contain any client applications.","When changing the configuration of processes, you might notice a colored border next to new or modified processes. This indicate the current state the process is in. A newly added process receives a green border, a modified process receives a border in the accent color of the current theme and a process which has validation issues receives a border in the warning color of the current theme. Additionally, validation issues are displayed above any node.","Configuration Validation"]},{"l":"Local Changes","p":["BDeploy keeps track of any changes performed on any of the Instance Configuration pages panels. These changes can be viewed by pressing the [Local Changes] toolbar button.","Local Changes Panel","You can [Undo] and [Redo] changes. Even dismissable messages (on product update) can be brought back by [Undo] and [Redo]. To view the current changes compared to the state you started from, use the [Compare Local with Base] button.","Local Changes Comparison"]},{"l":"Process Settings","p":["A process is started by executing the start command that is defined by the application. The parameters that are passed to the process are configured on the Process Setting panel. Click a process to access its settings panel.","From there, use the [Configure Parameters...] button to access the parameter configuration.","The available parameters, their type and whether or not they are mandatory or optional are defined by the Application. The dialog groups the available parameters into categories, which can be expanded by clicking them.","Parameter Configuration","The Application defines in which order the parameters are passed to the Process. This order cannot be changed for predefined parameters.","Hovering the mouse over a parameter will show a small popup that contains a thorough description of the selected parameter. This also works in the command line preview section, as well as in any compare views throughout BDeploy.","Validation issues are displayed per group in the respective title and next to the affected parameter.","You can use the Search Bar to search and filter for parameters even if they are not shown in the table. Groups will be hidden from the page unless a parameter matches - this includes optional (not yet configured) parameters."]},{"i":"copy--paste","l":"Copy & Paste","p":["You can copy a process configuration by accessing its process settings panel. Use the [Copy to Clipboard] button to copy the configuration to the clipboard. You can paste the configuration by accessing the [Add Application...] button of the desired node. Use the [Paste] button to paste the configuration from the clipboard.","Process Settings","You need to grant BDeploy access to the PCs Clipboard for the [Paste] button to appear in the node's application panel."]},{"l":"Optional Parameters","p":["Optional parameters can be selected for each group using the [Select Parameters...] button present on the header of each parameter group.","Add an optional parameter by clicking the [Add] button in front of it. You can also remove an optional parameter by clicking the [Remove] button in front of it."]},{"l":"Custom Parameters","p":["Custom parameters can be maintained in a dedicated parameter group which is always present. Because all parameters must have a determined sequence, custom parameters must define a predecessor parameter after which they are put on the command line. If no predecessor is defined, the parameter will end up first on the command line.","Click the [Add] button in the Custom Parameters group to add a new custom parameter.","Add Custom Parameter"]},{"l":"Global Parameters","p":["Global Parameters are valid for all Processes of an Instance that have a global parameter with the same id. They are also configured in the Process, but changes are copied to all other processes that also use this parameter. Global parameters are matched by their parameter ID, and marked with a globe icon in the parameter configuration panel."]},{"l":"Conditional Parameters","p":["Conditional parameters are parameters which are only configurable if a specific dependent parameter exists or has a certain value. These parameters are hidden until the dependent parameter meets requirements of the condition."]},{"l":"Link Expressions","p":["Link expressions can be used on all process parameters (as well as for endpoint configuration, inside configuration files, etc.). The BDeploy UI provides content assist for link expressions once a parameter editor is switched to expression mode, which is done using the toggle in front of each parameter. Each parameter is either a plain value or a link expression, depending on the toggle.","Content Asssist for Link Expressions","The content assist will propose categories of Variable Expansions first, and, once the category is determined, will continue to provide more detailed assistance.","See Variable Expansions for more details."]},{"l":"Command Line Preview","p":["A preview of the command that is executed to launch this process can be viewed by expanding the Command Line Preview section. The preview is especially useful in case of custom parameters to ensure that they are added in the correct order.","Preview Command Line with Custom Parameter"]},{"l":"Allowable Configuration Directories","p":["This section applies to CLIENT applications only.","CLIENT applications do not receive any Configuration Files from the instance configuration by default. The reason for this is simple: security. Client PCs are typically less secure than the server running SERVER applications. Regardless, CLIENT applications may require configuration files. It is therefore possible to whitelist certain configuration directories in the configuration of each CLIENT process in the instance configuration.","Allowed Configuration Directories","Select one or more directories to have those installed to the PC running the CLIENT application in addition to server nodes."]},{"l":"Instance Variables","p":["Instance Variables have been introduced along with their even more global counterpart System Variables. Instance Variables complement the concept of Global Parameters. They offer a more flexible - and along with System Variables also a more powerful - way of achieving the same result in many cases, and allow for even more use cases.","Instance Variables come in especially handy when used outside of process parameters, e.g. in configuration files, or process endpoints. They are inherently shared between all elements of an instance.","To add Instance Variables, use the [Instance Variables...] option in the Instance Settings panel. Add a new Instance Variable using the [+] button in the panels toolbar.","Creation of a new Instance Variable","The value of an Instance Variable can not only be a plain value of the selected type, but it can also be a link expression, which is a value consisting of a combination of plain text components and one or more Variable Expansions. In this mode, the editor will provide content assist for expansions and a dedicated variable list popup.","Creation of a new Instance Variable (Link Expression)","Once created Instance Variables can be referenced from all other Link Expressions, e.g. on process parameters, configuration files, etc."]},{"l":"Configuration Files","p":["The configuration files of all Processes of an Instance are maintained together in one place. It can be opened by clicking on the [Configuration Files] button in the Instance Settings panel. The initial set of configuration files is derived from the default set delivered with the product; see product-info.yaml.","Instance Configuration Files","The configuration files of an Instance can be compared with the original configuration file templates of the Product at any time, an according up to date hint is shown next to each configuration file if applicable. The [Compare with product template] button starts the comparison. Files which are present in the product but not in the instance configuration are marked - the same is true the other way around.","New configuration files can be be created using the [+] button. Prompt for a file name and an optional initial content to upload. When dropping a file onto the drop zone, the filename is updated automatically to match the dropped file.","The [Edit] button on each file can be used to edit the content of the file using an online rich editor.","Editing an Instance Configuration File","Online editing is only possible for text files. Binary files like ZIP, PDF, etc. cannot be edited online. However, it is possible to download them, modify them locally, and then reupload (and thus replace) them.","Variable Expansions can be used in configuration files. The variables will be expanded when the file is written on disc on the target node. The editor for configuration files provides content assist for Variable Expansions on [CTRL] + [Space] if the current word in the editor contains {{.","Changes done in configuration files must be saved and they result in a new instance version that must be installed and activated so that the changes have an impact, much the same as any other change in the Instance Configuration."]},{"l":"Change Product Version","p":["Instances are based on a product version. While the Product of the Instance cannot be changed afterwards, the Version can be chosen from the available product versions(upgrade to a newer version / downgrade to an older version).","If there's a newer product version available (newer than the one that is configured for the latest instance version), a notification is shown in the Instance Configuration pages toolbar.","Update Notification","Clicking on the notification opens the Update Product panel. The same panel can also be opened by clicking on the [Update Product Version] button in the Instance Settings panel.","Change Current Product Version","Changing the version can be done by clicking on the [Upgrade] or [Downgrade] button displayed at the right side of the product version. Changing the product version will trigger an automated migration. This migration will also validate changes. It gives hints about potentially relevant (but not blocking) changes and validation issues in case the migration could not be performed fully automatically. You then have the chance to fix issues manually before saving the resulting instance version.","Product Update Hints","Changing the product version will never change the Configuration Files of the Instance. In case configuration file templates change from one product version to the other, an update hint will be shown. You can then manually update configuration files as needed, see chapter Configuration Files.","Changing the product version will generate missing instance variables based on product's instance variable definitions. If previous version had some instance variable definitions which are not present in the new version, instance variables for those definitions will be removed, unless they overwrite a system variable."]},{"l":"Banner Message","p":["A banner message can be created for an Instance, which is displayed very clearly at the top of the overview dialog. You can choose from a series of predefined colors, so that depending on the urgency or content of the message a suitable color can be selected.","Instance Banner Configuration","Banner messages are maintained on instance level and are not versioned, i.e. they are independent of instance versions. Therefore they outlast configuration changes of an instance and can be configured without saving the Instance Configuration.","The banner is shown in the Instance Overview(as tooltip on the instance), in the Instance Dashboard and in the Instance Configuration pages."]},{"i":"importexport","l":"Import/Export","p":["Instance versions can be exported and downloaded from the Instance History. This will download this specific instance version's raw data as a ZIP. The ZIP can be re-imported using the Instance Settings panel to create a new instance version which has that exported instances content.","This mechanism allows access to the internal data structures of BDeploy. Great care has to be taken to not damage any of the data when manipulating the content of the ZIP manually."]},{"l":"Application Templates","p":["A product may contain Application Templates. These are pre-defined configurations for applications, resulting in a more complete process configuration when added to the target node.","We saw earlier how to add applications using templates. Depending on the selected template, you may be prompted to enter the required template variable values.","Add Process Template","The process configuration is created from the application template using the given variable values.","You will notice that the name of the process now matches the name of the template, not the name of the underlying application."]},{"l":"Instance Templates","p":["A product can define and include Instance Templates. These templates can be applied on an instance (e.g. after creating a new instance). They can define processes just like Application Templates, in fact they typically include existing Application Templates.","The advantage of an Instance Template is that it can contain more knowledge of how processes need to be set up to work together, wheras Application Templates define configuration for a single application.","Instance Templates can also be applied to instances which already have configured processes.","Selecting a template (here: Default Configuration) will show a list of groups defined in the template. These groups can be assigned to compatible nodes - groups containing server applications to server nodes, and groups containing client applications to the virtual Client Applications node. Selecting (skip) as target node will skip the processes in this group.","Instance Templates Node Assignment","When creating configurations on a SERVER node, applications will be added matching the nodes OS. If a server application is included in a group which is not available for the target OS, you will receive an according message.","When creating configurations for a CLIENT group, applications are added to the Client Applications virtual node, one for each OS supported by the application.","Next you will be presented with the template variables which need to be provided.","Instance Templates Variable Assignment","Clicking [Confirm] will create the processes defined in the template. The configuration will not be saved automatically in order to allow further tuning of the configuration. Applying templates can be undone by clicking [Undo] like any other change.","Applied Instance Templates"]},{"l":"Network Ports","p":["The Manage Network Ports panel can be reached from the Instance Settings panel. This panel provides a concise overview of all ports ( CLIENT_PORT, SERVER_PORT and URL parameters) used in the Instance.","The [Shift Ports] action allows to bulk edit selected port parameters and shift them upwards or downwards by a given offset.","The [Export CSV] action allows to export a CSV list of all ports configured in the system. This can be used to forward information to external partners, e.g. for further firewall configuration, etc."]},{"l":"Process Control Groups","p":["Processes can be grouped into Process Control Groups. Those groups dictate the order in which processes are started and stopped, as well as whether or not process startup is awaited.","Each Process Control Group has configurable behavior for contained processes regarding starting and stopping. Groups are processed in the configured order when starting, and the reversed configured order when stopping. Processes within each group are processed according to the groups configuration. Each group has its own configuration for startup and stop behaviour.","Possible values for the Start Type and Stop Type handling configuration are:","SEQUENTIAL: Each Process in the group is handled (started/stopped) sequentially. Any potential waiting (for startup and or shutdown, depending on the capabilities of the process) is done before proceeding to the next Process or Process Control Group. The precise behavior is determined by the Start Wait configuration (see below).","PARALLEL: Each Process in the group is handled (started/stopped) in parallel. Only once all Process operations within the group have finished, the group is considered finished and processing continues with the next Process Control Group. Be aware that in conjunction with CONTINUE wait mode for process startup, this will make a group complete immediately and continue on to the next group immediately as well.","Additionally, each Process Control Group can be configured to wait for process startup, i.e. startup probes. Each Process Control Group has a Start Wait configuration:","CONTINUE: When starting a Process in the group, do not wait for its startup to be complete, instead move on to the next process immediately. This makes the startup handling types ( SEQUENTIAL, PARALLEL) essentially irrelevant, as processes are typically created so fast that it does not make any difference.","WAIT: When starting a Process in the group, wait for its startup to be complete before continuing to the next Process. The startup of the process is considered complete once the Startup Probe becomes live. If no Startup Probe is configured, this mode is equal to CONTINUE.","WAIT_UNTIL_STOPPED: When starting a Process in the group, wait for it to finish before continuing to the next Process. A process is considered finished once its state is STOPPED.","Add Process Control Groups","Each SERVER node automatically uses Process Control Groups and is initialized with a 'Default' group. Adding a new Process to a Node will always add that Process to the last Process Control Group. It can then be moved by drag and drop to another Process Control Group if required.","Edit Process Control Groups","Process Control Groups themselves can be re-ordered using the [Move Up] and [Move Down] buttons."]},{"l":"Deleting an Instance","p":["An instance can be deleted from the Instance Configuration page, in the Instance Settings panel."]}],[{"l":"Deployment","p":["The process of getting one instance version up and running is called deployment. This includes the steps installation, activation and process control.","A Deployment can be performed on the current instance version or on a historic instance version. All instance versions can be deployed using the Instance History page - select a version and use the according actions. For the most common case of deploying the current instance version, the deployment is performed by clicking the [Install] and [Activate] buttons on the Instance Dashboard after configuring an instance."]},{"l":"Installation","p":["All available instance versions can be installed via the action [Install] on the Instance History page or the Instance Dashboard. Clicking on that button will transfer all files that the application requires to the configured target nodes. This means the applications are extracted from the internal storage that BDeploy is using and written to the hard disk.","Installed versions occupy additional disk space on the target node. Applications are installed in a shared pool directory on the target node. Thus multiple different processes referring to the same application are written only once to the hard disk. This minimizes the required disk space and leads to faster installation times as only the first process needs to be be written to the hard disk. The kind of pooling used can be configured in app-info.yaml by the product vendor.","Multiple instance versions can be installed simultaneously. This allows very quick switching between them. This is useful in case of a failed upgrade because it allows to immediately switch back to the previous software version."]},{"l":"Activation","p":["Exactly one of the installed instance versions can be marked as active with the action [Activate]. The process control always refers to the active version. Versions that are just installed but not active cannot be started. Only processes from the active version can be started. The Instance Dashboard allows control of the processes of the active version.","Marking a desired version as active does not require to stop all running processes. An outdated hint is displayed on the Instance Dashboard when processes from non-active versions are still running. They can be manually stopped if desired and then started from the currently active version."]}],[{"l":"Process Control","p":["For the active Instance Version, the Process Control of each Process can be displayed by clicking it in the Instance Dashboard. The upper part of the Process Control panel shows the current Status. Below it, the control elements for starting, stopping or restarting the process can be found.","Process Control Panel"]},{"l":"Process Bulk Control","p":["In addition to the actions for individual processes, the Instance Dashboard offers bulk control actions from its toolbar. The three instance control buttons exclusively affect all processes with start type INSTANCE, while the three Selected Processes buttons affect selected processes except for those with start type MANUAL_CONFIRM.","Bulk Process Control","Using the bulk control actions with a single process selected is the same as using the individual actions on the process details panel."]},{"l":"Process Status","p":["The process status is visualized using an icon for each process. Hover over the icon to get details about the current status.","Icon","Description","Process is stopped.","Process is starting.","Process is running. If the process defined a startup probe(see app-info.yaml), this status is reached as soon as the startup probe indicates a successful startup of the application. Otherwise - without probe - the process reaches the running state immideately.","Process is running but stopping has been requested by the user.","Process is running, but a defined liveness probe(see app-info.yaml) indicates that the process has a problem.","Process crashed unexpectedly. Process Control scheduled an automatic restart. No interaction is required.","Process crashed unexpectedly. Process Control gave up restarting as the last 5 attempts failed. Manual interaction is required.","The life cycle of a process is visualized in the following state graph:","Process Life Cycle"]},{"l":"Process Outdated","p":["A warning message - Outdated- is displayed whenever one or more Processes are running in a version that is currently not active. This happens when deploying a new version while Processes are still running.","Outdated Process","In principle this is nothing to worry about. It is just a reminder that the configuration has changed. The Processes will remain running in their current version until they are actively restarted. The message cannot be confirmed or closed as it automatically disappears once all Processes are running in the active version."]},{"l":"Process Start Types","p":["The Start Type of a Process can be configured in the Process Configuration dialog. The available options depend on the Application. That means the publisher of an Application defines which Start Types are supported. The following types are available:","Name","Description","MANUAL","Process must be started manually. No automatic startup will be done.","MANUAL_CONFIRM","Process must be started manually and an additional confirmation is required. These kind of processes cannot take part in bulk control actions.","INSTANCE","Process will be started automatically if the Automatic Startup flag of the Instance is set.","It is a common requirement that certain Processes of an Instance should be automatically started whenever the BDeploy server itself is started. To accomplish that, the Automatic Startup flag of the Instance must be set. This can be done in the Instance Configuration. Additionally, the start type of the Process must set to INSTANCE. This can be done in the parameter configuration of the Process.","Processes that are executing actions that cannot be reverted or that are potentially dangerous in productive environments (e.g. dropping a database and/or deleting files) should be configured with the start type MANUAL_CONFIRM. Doing that results in an additional popup dialog that forces the user to enter the name of the Process before it is started. The idea is that the user takes an additional moment to ensure that they really want to start the selected Process.","Manual Confirmation on Startup"]},{"l":"Startup and Shutdown Order","p":["The Process Control starts the processes in the order as they are defined in the Process Configuration dialog. Processes can be grouped in Process Control Groups, which dictate the exact behavior for a group of Processes. When [Start Instance] is invoked then all processes with startup type INSTANCE are started in the defined order - potentially waiting for a startup probe after launching the command. When [Stop Instance] is invoked then all running processes are stopped according to the group strategies. The order is reversed during the stop operation. That means the last process is stopped first and the first process is stopped at last (in SEQUENTIAL mode). The next process is stopped only when the previous is terminated. The same holds for Process Control Groups; groups are processed one after another when starting, and in reverse order when stopping.","The exact meanings of the different configuration options is described in the Process Control Groups section.","Bulk control of selected processes uses the exact same Process Control Groups configuration as the [Start Instance] and [Stop Instance] actions. Only selected processes will be affected, as opposed to the whole instance. The [Start Instance] and [Stop Instance] will only affect processes with start type INSTANCE. Bulk control can also affect processes with start type MANUAL(when selected)."]},{"l":"Keep Alive","p":["If the Keep Alive flag for a Process is configured then the Process Control restarts it when it crashes unexpectedly. The first restart attempt is immediately executed after the process terminates. Subsequent attempts are delayed. That means the Process Control waits a given time period until the next start attempt is executed. Such a situation is visualized in the Process state.","Crashed Server Process (temporarily)","The Process Control will give up restarting a process after a configurable number of unsuccessful restart attempts. Such a situation is visualized in Process state. This icon means that the user has to manually check why it is failing and restart it if desired.","Crashed Server Process (permanently)"]},{"i":"view-stdout--stderr","l":"View STDOUT / STDERR","p":["Clicking on the terminal icon displayed below the process control actions will open a live stream of the STDOUT as well as STDERR stream of the running Process. This allows a quick health check to ensure that everything works as expected.","Show and Follow Process Output"]},{"l":"Process Port Status","p":["The applications server ports (if any are defined) and their state on the target node can be viewed by clicking on the [Process Port Status] below the process controls. Each parameter of type SERVER_PORT is displayed here - including its description and configured value. Each port has a status. This status determines whether the port has the expected state on the server. This means that the port is closed if the process is not running, and vice versa. BDeploy cannot check whether the port was opened by the correct application."]},{"l":"Native Processes","p":["Clicking on the [Native Processes] below the process control will open a panel showing all operating system processes that are associated with this Process."]},{"l":"Parameter Pinning","p":["Parameter Pinning allows you to pin \"important\" parameters, so that they are not only visible during configuration of a process, but also on the process panel on the dashboard. This provides quick access to information about a process. A parameter can be pinned by clicking the little pin icon which appears on each parameters editor when hovering over it.","The pinned parameter is visible after saving, installation and activation of the Instance version where the parameter has been pinned.","Pinned Parameter on Dashboard"]},{"l":"Data Files","p":["The Data Files page lists all files that are stored in the data directory of each node. All files can be downloaded, and some supported filetypes (e.g. .txt) can even be opened and edited directly in the UI by clicking on them. The table is by default sorted by the last modification timestamp. Thus the newest files are displayed first.","The [delete] button can be used to delete a file. This requires administrative permissions on the server or the instance group.","Clicking a file will open the file in the file viewer, the [Follow] toggle allows to grab new output as it is written on the server.","File Viewer","Files can also be manually added and edited online. Use the [Add File] button, and the [Edit] button per file to do so.","File Editor","It is possible to put symbolic links inside the data directory to access directories not directly within the data directory through the BDeploy UI. This possibility must be used with care. It is the responsibility of the user to assure that manually created symlinks will be safe to read and write by BDeploy and/or its controlled applications."]},{"l":"Log Files","p":["The Log Files page lists all files that are stored in the designated log files directory of the BDeploy server. The table is by default sorted by the last modification timestamp. Thus the newest files are displayed first.","View Log File","This behaves exactly the same as the aforementioned Data Files, with the one exceptions that Log Files are read only - it is not possible to edit or delete them via the browser, and it is also not possible to manually create new files."]}],[{"l":"Instance History","p":["Whenever saving the Instance Configuration, BDeploy creates a new instance version. Each historic version is available from the Instance History. Here you can view all those changes and see who made them and when they were made.","There are three types of history entries: Creation, Deployment and Runtime events. Each event has a title, the corresponding version, as well as the time the event happened.","Deployments and Runtime events are not displayed by default. You can enable them using the toolbar buttons.","If you have not made any changes, only one entry will be shown: Version 1: Created. This is the initial (empty) instance version.","To see details for a certain history entry, click it. This will open the details panel. This panel offers different kinds of information and actions depending on the type of history entry.","Creation events are special in that they represent a specific instance version and allow you to install, activate and compare them to other instance versions. Given the proper permissions, you can also delete them - which will remove this specific version completely from the server, no restoring possible.","Instance versions can also be exported from the details. The export produces a ZIP file which contains all data that represents an instance version. This can be used to create a new instance version on a different instance from the current configuration of this instance by importing the ZIP in the Instance Configuration of the other instance.","Instance History Entry Details","You can compare either to the current version, the active version or any chosen version available from the history.","Compare Versions"]},{"l":"Creation Events","p":["Each change that leads to a new instance version is a creation event. This typically is saving the Instance Configuration."]},{"l":"Deployment Events","p":["Deployment events are: INSTALLED, ACTIVATED, DEACTIVATED, UNINSTALLED.","Deployment events will show up once you enabled them using the toolbar. Deployment events allow tracking of who deployed what and when.","Creation and Deployment Events"]},{"l":"Runtime Events","p":["Runtime events are: STARTED, STOPPED, CRASHED, RESTARTED, CRASHED PERMANENTLY.","Runtime events will show up once you enabled them using the toolbar. Runtime events can be used to track process state history. You will be able to see who started/stopped processes and when. Events not induced by a user action are shown using BDeploy System as user, e.g. when a process is restarted after a crash.","The Process ID and Exit Code will also show up given that the information was available at the moment the event happened. This can be influenced for instance by a restart of BDeploy itself, in which case limited information about running processes is available.","Creation and Runtime Events"]}],[{"l":"Client Applications","p":["A dedicated overview page shows all configured Client Applications of an entire Instance Group. This page can be opened by navigating to the desired Instance Group. Clicking on the [Client Applications] button in the main navigation menu opens the overview page.","The page will offer the appropriate Client Application based on the operating system that the user is currently using. Switching the OS can be done by updating the default grouping of the Client Applications page."]},{"l":"Launcher","p":["Client Application is started through a special Launcher that needs to be installed on all client devices. The launcher is responsible for keeping the application up-to-date and to pass the configured parameters to the application."]},{"l":"Installer","p":["An Installer is provided for each Client Application to make the installation as easy as possible. The installer does not have any prerequisites and can be downloaded and executed by any user.","The Installer checks if the latest version of the Launcher is already installed. If not then the Launcher is downloaded and stored on the client device. The user can then start a Client Application with the branded Shortcut that is stored on the Desktop or in the Start Menu."]},{"l":"Windows","p":["The Launcher is installed for the Current User in the %LOCALAPPDATA%\\BDeploy folder ( C:/Users/<user>/AppData/Local/BDeploy). The location can be changed by setting the BDEPLOY_HOME environment variable before launching the installer. No administrative privileges are required for this installation type."]},{"l":"Unattended Mode","p":["The Installer can also be started in an unattended mode with the /Unattended flag so that no UI is shown.","When automating the installation it might be required to wait until the actual installation is finished. To do that using the PowerShell the Start-Process cmdlet can be used:"]},{"l":"For All Users","p":["The Launcher can also be installed for all users by starting the installer with the /ForAllUsers flag. The default location in that case is %ProgramFiles%/BDeploy( C:/Program Files/BDeploy). The location can be changed by setting the BDEPLOY_HOME environment variable before launching the installer. Ensure that all users have access to the customized location. Otherwise they cannot launch the application.","Installation for All users requires a terminal with elevated privileges ( Run as Administrator). Just running the command as local administrator is not sufficient.","The Start cmdlet with the -Verb RunAs switch triggers a UAC prompt so that the installer is running with elevated privileges.","Additional configuration might be required depending on the installation location. See Multi-User Installations for more information."]},{"l":"Authenticode Signature","p":["All Windows binaries of BDeploy are signed using an SSI Schaefer IT Solutions GmbH code signing certificate. The installers are built and signed at release time. However, due to the very dynamic nature of applications in BDeploy, the installer needs to be branded after being signed during the build (to make it know which server to contact, which application to install, etc.).","BDeploy uses a technique commonly called Signature Stuffing. This technique is widely used in various installation programs, as many have the same requirements. Unfortunately, this technique can also be abused by malicious code and is thus regarded as potential security risk, see the official Microsoft report. Microsoft does not enable the mitigation for this vulnerability by default, since this breaks signature validation on many installation programs.","The effect of enabling the recommended settings as per the report above will have the effect, that all branded BDeploy binaries will be regarded unsigned. Those binaries will be shown (in properties dialogs and all other means of verification, e.g. signtool verify) as unsigned. No hint will be displayed, that the binary is, in fact, signed but does not meet the stricter security policy in place."]},{"l":"Linux","p":["The Installer stores the Launcher and all Client Applications in $HOME/.bdeploy. This location can be changed by setting the environment variable BDEPLOY_HOME.","The installer uses the ImageMagick suite to read and convert icons for the applications. If this is undesired or not possible, settings the SKIP_ICON environment variable to any value will skip this step. The installed application(s) will have no icon associated with them."]},{"i":"click--start","l":"Click & Start","p":["Click & Start enables the launching of Client Application by simply clicking a link in the web browser. In this case the applications are not integrated into the operating system (Start Menu, Desktop Shortcut). A prerequisite is that the Click & Start Launcher is deployed on the client device. This can be done by using the Click & Start Installer available in the top-right corner of the Client Applications page. The installer will download the Click & Start Launcher and associate it with .bdeploy files.","The Launcher can also be manually deployed using the provided ZIP file. After downloading and unpacking the Launcher may be associated with .bdeploy files using FileAssoc.exe on Windows or file-assoc.sh on Linux. Those commands are part of the launcher distributable.","Clicking on a Click & Start link in the Browser will download a .bdeploy file that can be directly executed. A more elegant way is to configure the Browser to directly open the .bdeploy file type. Firefox as well as Chrome allows to configure this after the file has been downloaded."]},{"l":"Application Browser","p":["The Launcher( BDeploy.exe) can also be launched directly without any arguments. In this case a dialog is shown that lists all locally installed applications.","Client Application Browser","If the application supports autostart it is possible to disable and enable the automatic startup by toggling the checkbox in the rightmost column.","The Customize & Launch context menu entry allows the user to modify the command line arguments that are used to start the application. A new dialog is opened that lists the existing command line arguments as currently defined by the active instance version.","Additional arguments can be added or existing ones can be modified or deleted as desired. This option is especially useful for testing. Arguments can be modified locally without the need to change the global Instance Configuration. The modified arguments are not saved, so they need to be reentered the next time the application is launched."]},{"l":"Additional Command Line Arguments","p":["When launching an application using a .bdeploy file additional command line arguments can be defined which are passed to the target application.","All arguments after the -- switch are passed to the launched application. They are added AFTER all existing arguments that are currently defined in the active instance version. Individual arguments need to be separated using a single space. Quotation marks are required when the argument or its value contain spaces.","A shortcut can be saved that includes the customized parameters. Doing so allows to save the customized arguments so that they do not need to be entered all the time. Executing the shortcut then launches the application with the saved arguments."]},{"l":"Multi-User Installations","p":["Larger organizations typically do not want to deploy client applications on each client device manually. They prefer to install the client software on a central server and publish the software via Citrix or similar technologies so that all users have access to one shared installation. This has the advantage that the administrators are in control of the installation and can centralize the update handling. BDeploy supports such an installation scenario.","There are two different locations that are important in the context of deploying applications in a multi-user environment:","Installation Area- The location where the launcher as well as all applications are installed. This location is typically protected by file system privileges so that an Administrator has full permissions and all other users have read permissions. This location is defined by the environment variable BDEPLOY_HOME.","User Area- The per-user area where the launcher as well as each launched application are permitted to write files. This location is mandatory if the Installation Area is read-only. This location is defined by the environment variable BDEPLOY_USER_AREA."]},{"l":"Configuration","p":["When the Installation Area is read-only the environment variable BDEPLOY_USER_AREA must be set for each user and must point to a directory where the user has write permissions."]},{"l":"Installing new Software","p":["New software is typically installed by an Administrator who has full permissions in the Installation Area. The administrator is either using the provided Installer or a Click & Start file in order to install the new application. After this step the application is available and can be launched by each new user by using the Click & Start file."]},{"l":"Updating Software","p":["Whenever a new Product Version is Activated on the server the administrator must launch the application once to deploy the new update. Not doing that will lead to an error that each user receives when trying to launch the application. The Launcher always checks for updates and tries to install them. Using an outdated application is not permitted and thus users will no longer be able to launch the application.","Required Software Update","Configuration changes in a client application - like adding, removing or changing a parameter - do not require Administrator attention since the installation itself is not affected. The change is automatically applied on the next start of the application.","Changing the product version or changing the launcher version on the server require a manual interaction of the Administrator, otherwise no user can use the client application anymore."]},{"l":"Application could not be Launched","p":["Whenever the client application cannot be launched a generic error message is shown to the user. The root cause can be viewed when clicking on the View Details button. The error message is also logged to the Application Log file. The log file is located next to the installation directory in a folder called logs.","The table below shows some the most common error messages and how to solve them."]},{"i":"error-message-jakarta-ws-rs-processingexception-java-net-connectexception-connection-refused","l":"**Error Message**: `jakarta.ws.rs.ProcessingException: java.net.ConnectException: Connection refused`","p":["Description: The BDeploy server is either not running or the required port is not reachable.","Solution: Start the BDeploy server and ensure the port is not blocked by a firewall."]},{"i":"error-message-inconsistent-file-and-folder-permissions-missing-permission-to-delete-files","l":"**Error Message**: `Inconsistent file and folder permissions: Missing permission to delete files.`","p":["Description: Permissions of the root directory are invalid. Typically happens when just the Modify permission is revoked.","Solution: Regrant Modify permissions or make sure to also revoke the Write permissions to make the installation read-only."]},{"i":"error-message-inconsistent-file-and-folder-permissions-missing-permission-to-create-files","l":"**Error Message**: `Inconsistent file and folder permissions: Missing permission to create files.`","p":["Description: Permissions of the root directory are invalid. Typically happens when the 'Advanced Security' options are used.","Solution: Make sure that the permissions are set to Modify or to Read, Execute."]},{"i":"error-message-inconsistent-file-and-folder-permissions-missing-permission-to-modify-files","l":"**Error Message**: `Inconsistent file and folder permissions: Missing permission to modify files.`","p":["Description: Permissions of the root directory are invalid. Typically happens when the 'Advanced Security' options are used.","Solution: Make sure that the permissions are set to Modify or to Read, Execute."]},{"i":"error-message-bdeploy-home-directory-has-changed-expected-x-got-y","l":"**Error Message**: `BDeploy home directory has changed. Expected X. Got Y.`","p":["Description: Launcher detected that the installation directory has been moved or that it is accessed via a different path.","Solution: When moving was done intentially update the path in the bdeploy.home file.","When accessing the launcher via a file share then make sure that the path is exactly the same.","\\\\my-server\\launcher","\\\\my-server.my-domain\\launcher","\\\\192.168.2.100\\launcher"]}],[{"i":"centralmanaged-specific-configuration","l":"Central/Managed Specific Configuration","p":["The Central/Managed Mode requires some configuration to attach CENTRAL and MANAGED servers.","On the CENTRAL server side:","Each Instance Group has a list of MANAGED servers attached to it.","Each Instance is associated with exactly one of those MANAGED servers.","Synchronization to the CENTRAL servers data store is done on demand (through a button in the Web UI). When synchronizing from a MANAGED to a CENTRAL server, only configuration data is synchronized. Actual Product and Application data is only synchronized when explicitly requested through the Product Synchronization page on the CENTRAL server.","It is possible to create a new instance version on the CENTRAL server from a product version which has been pushed only to the CENTRAL server (but not to the MANAGED). In this case, the required product data is sent to the MANAGED server once install is performed on this instance version. In this scenario install must be performed on the CENTRAL server.","On The MANAGED server side:","Creation and editing of Instance Groups(title, description, logo, etc.) is not possible locally. This has to happen on the CENTRAL server, as information must match.","Creation and editing of Instances(applications, parameters, etc.) is possible just the same as with a STANDALONE server. New data will be synchronized to the CENTRAL server the next time the CENTRAL server requests such a synchronization.","BDeploy is built for restrictive networks. The assumption is that the CENTRAL server can contact MANAGED servers, but never the other way around."]},{"l":"Attaching an Instance Group to a Central Server","p":["Alternatively, use the Manual and Offline Linking panel to download the information in an encrypted form. This can be uploaded on the CENTRAL by dropping the file on the very same drop-zone.","Attaching an Instance Group is a two way operation.","Click the [Link Managed Server] button to initiate attaching a MANAGED server to this Instance Group.","Clicking [Save] will initiate the actual attachment process. The CENTRAL server will contact the MANAGED server using the provided URL. It will then perform the initial synchronization of data. Once this is done, the panels close on both servers. The attached server appears on the CENTRAL, and the attached Instance Group appears on the MANAGED server. In case attaching is not possible automatically, you will be provided with the possibility to download synchronization information from the CENTRAL server. You can drop this in the Manual and Offline Linking panel on the MANAGED server to complete linking without actual contact to the server.","Filled out Link Panel","Finally, the CENTRAL server will fetch all potentially existing Instance information from the MANAGED server. This is only relevant if the MANAGED server was migrated from STANDALONE mode before.","Link Instance Group Panel","Link Managed Server Panel","Link Success (Central)","Managed Server Welcome Page","Managed Servers Page on Central","On the CENTRAL server, choose [Managed Servers] on the main menu after selecting an Instance Group you want to attach. This will take you to the Managed Servers page for that Instance Group. Initially, this page will be empty.","On the CENTRAL server, you will choose the Instance Group which should be attached. The Instance Group must exist on the CENTRAL server. If the MANAGED server happens to have an Instance Group of the same name already (i.e. if the MANAGED server was migrated from STANDALONE), this is perfectly fine - Instances in this Instance Group will not be lost, they will be attached to the CENTRAL server instead.","Once contacted, the CENTRAL server will push the Instance Group meta-data to the MANAGED server, as the information on the CENTRAL is the single source of Instance Group configuration.","Once the information is dropped on the according drop zone on the CENTRAL server, it will fill out the information. Adapt the URL if required and fill in a human readable description of the MANAGED server. The URL should be reachable from the CENTRAL server and accomodate for any hostname mapping required (NAT, VPN, DNS, ...).","Servers which do not have an actual connection to each other, but are linked manually, will not be able to synchronize instance information unless a mail configuration is set up. See E-Mail Sending and Receiving for details.","The CENTRAL server will try to contact the MANAGED server. You can provide an alternative URL to accomodate for hostname differences (different DNS, NAT, VPN, etc.) before it does so.","The MANAGED server needs to share some details about itself with the CENTRAL server. This happens either via drag & drop of an element from the MANAGED servers Web UI to the CENTRAL servers Web UI, or manually by downloading the MANAGED servers information and dropping that file to the CENTRAL servers Web UI.","The MANAGED server provides the card to drag to the counterpiece on the CENTRAL server. Drag it over to fill out information on the CENTRAL server automatically.","To attach in Instance Group, you need both Web UIs of CENTRAL and MANAGED server. Make sure you have both available and open in browsers next to each other (on the same machine, so drag & drop will work).","You can distinguish CENTRAL and MANAGED servers by the according banner in the expanded main menu in the Web UI.","You will be prompted to drop MANAGED server information on a drop-zone. You can find the counterpiece on the MANAGED server. To initiate attaching on the MANAGED server, click the [Link Instance Group] button on the main Instance Group page (which is the initial start page of the Web UI). This will open the Link Instance Group panel.","You will notice that a MANAGED server will greet slightly differently on the welcome page. Instead of an [Add Instance Group] button, there is a [Link Instance Group] button."]},{"l":"Instance Synchronization","p":["Once a MANAGED server is attached to the CENTRAL server, Instance data can be synchronized from the MANAGED server on demand by the CENTRAL server. This can happen either from the Managed Servers page you saw before, by pressing [Synchronize] on the according server or directly from the Instance Overview and Instance Dashboard/ Instance Configuration pages.","The [Synchronize] button only exists on the CENTRAL server.","Instance Browser (Central)","Instance Dashboard (Central)","Instance Configuration (Central)","It is not required to synchronize the other way ( CENTRAL to MANAGED) as this happens implicitly when performing changes to an Instance. Changes are actually performed always on the controlling master, which is always the MANAGED server."]},{"l":"Migrating between Modes","p":["There is a limited possibility to change the purpose of an already initialized BDeploy server root directory. It is only possible to migrate from STANDALONE to MANAGED and vice versa, as data is mostly compatible. A command line tooling exists for this purpose:","Migration from STANDALONE or MANAGED to NODE is available using a dedicated workflow from the Web UI. This allows to start off an installation as STANDALONE and later on migrate that to be a NODE in a larger setup. See Convert/Migrate to Node.","The value for mode may be MANAGED or STANDALONE. The actual migration of data may be performed later on when first accessing them. For instance, when clicking an Instance Group, you might be prompted that an Instance Group requires to be attached to a CENTRAL server in MANAGED mode, and the Attach to Central Server wizard is launched."]},{"l":"Product Synchronization","p":["When working with CENTRAL and MANAGED servers, products can be uploaded to either of the servers. However, a product version must be available on the server which is used to update and configure an Instance using that version.","The recommended way of working is to exclusively use the CENTRAL server for all tasks, e.g. pushing new product versions, changing configuration, etc. When installing an Instance version to the target server, the required product data is automatically transferred as part of the process.","Sometimes, it might be necessary to transfer product versions from one server to another. For instance, a product version was directly pushed to MANAGED server A, but is required as well on MANAGED server B. In this case you can use the Product Synchronization wizard to copy product versions from one server to another from the CENTRAL server.","You can find the Product Synchronization panel on the Products page on the CENTRAL server inside a given Instance Group. The additional [Synchronize Product Versions] button is only available on the CENTRAL server.","Synchronize Product Versions Panel","Clicking it will open the Product Synchronization panel. First you need to choose a direction of transfer. Either transfer products to or from the CENTRAL server. After selecting a direction, you will have to choose the MANAGED server to transfer from or to.","Choose Server Panel","Clicking a server will fetch available products from that server. The list will contain product versions which are not yet present on the target server. Check all you want to transfer and click [Transfer].","Choose Product Versions Panel","The panel will initialize the transfer of the product version(s) in the background. You can keep track of transfers using the global activity report available from the main menu. Once a product version is transferred, it will appear in the list of available products on the target server."]}],[{"l":"Tutorials","p":["This chapter contains a series of tutorials that cover the basic steps that a typical end user should be able to do."]}],[{"i":"how-can-i-change-a-process-configuration","l":"How can I change a Process Configuration?","p":["A hint ( OUTDATED) will be displayed if a Process is running in an older version, for instance the version which was active until moments ago.","Access to older Instance Versions is provided from the [Instance History] button in the main menu.","Changing the configuration of a Process is done in the Process Configuration Panel:","Click in the desired Instance.","Click on activate, this operation is typically very fast.","Click on Apply in the top right corner if you are finished with this Process","Click on Configure Parameters... in the process edit panel.","Click on install and wait for the operation to complete.","Click on Save in the top right corner.","Click on the [Instance Configuration] button in the main menu.","Click on the desired Instance Group.","Click on the Process you wish to configure.","If the current Instance Version is not the currently active one, a banner will show a hint and the required buttons to install and activate the current version.","It can be desirable and OK to not restart certain processes, and leave them in the OUTDATED state. This highly depends on the software being deployed.","Modify the Process as desired: Rename, Change Parameters, Add / Remove Parameters","Repeat the steps 5-6 with each process that should be running from the new, now active version.","Repeat the steps 5-8 with every Process that should be adopted.","Saving Instance Configuration will automatically redirect you to the Instance Dashboard. You can also access the dashboard from the Instance Overview page by clicking an Instance.","Start from the Instance Group Overview page, which is the first page right after logging in.","Start the processes by click on the [Start] button.","Stop the process you want to update by clicking on the Process. Click on the [Stop] button.","The changes are now saved but they are not yet active. The new version must now be Deployed and all Processes must be restarted so that the changes have an effect.","The configuration changes are now live and all Processes are running again. The Process Settings and the Process Control chapters provide more details about the step outlined in this tutorial.","The hint ( OUTDATED) disappears once all processes are running in the active version.","You can undo/redo changes to multiple processes and/or instance configurations. You can also view any local changes using the [Local Changes] button."]}],[{"i":"how-can-i-see-whats-up-and-running","l":"How can I see what's up and running?","p":["The status of an Instance is visualized in the Instance Dashboard.","The individual process status is displayed with the according process - in the table row, or on the card, depending on the view mode.","The individual process status is displayed in even more detail when clicking a process in the Process Details Panel.","The overall Node state is displayed above the individual process list, and is also visible in collapsed mode. This overall status displays whether the current state is the expected state for a running instance. More explicitly this means if there is a green checkmark, all processes of start type INSTANCE are running.","The Process Control chapters provide more details about the individual process states along with a state graph that visualizes the life cycle of a process."]}],[{"i":"how-can-i-deploy-a-new-product-version","l":"How can I deploy a new Product Version?","p":["Upgrading the Product Version that is used in an Instance requires two distinct steps:","Uploading the new Product Version","Upgrading the Instance"]},{"l":"Upload Product Version","p":["Uploading a new Product Version is done on the Products page of the Instance Group:","Click on the desired Instance Group","Click on [Products] button in the main menu.","Click on the [Upload Product] button in the toolbar.","Select the ZIP archive containing the new Product Version. This archive is typically created by your Build tool.","The product is uploaded, processed and will appear in the list of available products once successfully imported.","The Product Version is now available and can be used in all Instances of this Instance Group."]},{"l":"Import Product Version","p":["You can import a new Product Version from a software repository. It is done in the Products page of the Instance Group","Click on the desired Instance Group","Click on [Products] button in the main menu.","Click on the [Import Product...] button in the toolbar.","Select a software repository.","Choose Repo","Select the product.","Choose Product","Select the product version.","Choose Product Version","Click the import button.","Press Import button","The product will appear in the list of available products once successfully imported.","Product Version imported","The Product Version is now available and can be used in all Instances of this Instance Group."]},{"l":"Upgrade Instance","p":["Changing the Product Version of an Instance is done in the Instance Configuration dialog:","Navigate back to the Instance Overview dialog by clicking the [Instances] button in the main menu.","Open the desired Instance by clicking it.","Each node displays the currently used product version. In case an update is available, a hint is shown in form of a small icon.","Clicking on this hint opens the Instance Configuration page along with the Update Product panel.","You can also navigate to the Instance Configuration page by clicking the [Instance Configuration] button in the main menu. This page shows a more prominent hint about the new Product Version.","Click on the [Update] button of the desired product version.","The update to the new Product Version is performed and validated on the server. It is - however - not saved, so you can undo/redo, perform changes - just like with any other configuration change.","Update hints may be shown in a separate section which can be dismissed. Those are purely informative things which point to actions performed during the update which may or may not have an impact on the software.","Validation Issues may be shown in a separate section if they occur due to the update. This can be a wide variety of things - all of them require manual intervention before you are able to save the Instance Configuration.","Adopt the configuration of the Processes as required.","Click on Save in the top right corner to save this version.","The Instance is now based on the new Product Version. Remember that the new Instance Version must be Installed and Activated so that the changes have an impact - clicking Save will bring you to the Instance Dashboard from where this can be performed directly.. Please read the Process Configuration tutorial about more details how to do that."]}],[{"l":"How can I setup systems from the CLI"},{"l":"Preconditions","p":["You must know the common Terms of BDeploy.","Having read the documentation about Instances is also adviceable.","You must be on a machine which can reach the central, managed and node server simultaneously. It is also assumed that the central server is already set up and has a Software Repository which contains the Product that you want to deploy."]},{"l":"Creating and starting the Servers","p":["Download BDeploy from GitHub.","Navigate to the Version that you want.","Find the zip files called bdeploy-OPERATING_SYSTEM-BDEPLOY_VERSION_NUMBER.zip and download the one that is appropriate for your operating system.","Unzip the zip file.","Open the unzipped folder and navigate to the subfolder bin. It contains a file called bdeploy.bat on Windows, and bdeploy on Linux. Execute this file via a CLI as shown below to initialize the servers:","managed","node","Where PATH_TO_ROOT is the path to the directory where the BDeploy server will be installed into, URL and PORT comprise the URL of the server via which the other servers will be able to contact it in the network and ADMIN_PASSWORD is the password for the initial admin account. The PATH_TO_NODE_TOKEN is a path where the node ident file will be created. This file contains a token that will be required to connect the node to another server.","Each server can be started with the command shown below, where PATH_TO_ROOT is the path to the home directory of the respective minion.","Alternatively you may configure a service on your operating system as described here.","Store local logins for each server for future convenience. Note that this will ask you for your username and password.","central","You can use","to look at all currently stored connections. This will also show you the currently active connection. In case the currently active connection is not central, execute the following command to change that.","Note that the login information is by default stored in the current users HOME (~/.bdeploy_login). This can be changed by setting the environment variable BDEPLOY_LOGIN_STORAGE to a different directory."]},{"l":"Creating an Instance Group","p":["We must create an instance group on the central server in order to be able to connect the managed server to it. This is achieveable with the following command:","If you lack the permission to create an instance group, find an administrator of that server that can create the group and/or assign permissions to you."]},{"l":"Connecting the Servers"},{"l":"Connecting the node to the managed server","p":["In order to connect the node to the managed server you need to locate the file that was created during init of the node (--nodeIdentFile argument of init). Execute this command on the node server:","You can use this command to look at all currently connected nodes of the managed server:"]},{"l":"Connecting the managed to the central server","p":["Create a managed-ident.txt:","Upload the managed-ident.txt:","Note: Make sure that URI_OF_MANAGED_SERVER is the URI as it is reachable from the central server. This might be different from how the managed server is reachable locally, e.g. due to NAT/VPN."]},{"l":"Configuration and Installation of Instances","p":["There are two ways to continue from here: Either with a: System Template or an Instance Template. The former approach will create a whole system all at once, while the latter allows you to build up a system instance by instance.","Either way, you will need the name of the managed server. It can be retrieved with this command:"]},{"l":"System Template","p":["See system-template.yaml for an example system template.","In order to use a system template via the CLI all of its templateVariables must have a defaultValue. In the example system template that is linked above, the template variables are marked with 2. Furthermore, all template variables of the linked instance and application templates must be given a fixed value via fixedVariables. In the example system template that is linked above, the fixed variables of one instance are marked with 4.","Now we upload the system template, creating a new system in the process."]},{"l":"Instance Template","p":["See instance-template.yaml for an example instance template.","In order to use an instance template via the CLI you must have a so-called \"response file\" which contains all values required to apply the instance template without the need to query things from the user, as the CLI cannot do that. The response file has the exact same syntax as the instances section of a system template.","This is an example of such a response file:","Note: The node of all client applications must be exactly\"Client Applications\".","First we want to create an empty system. The following command can be used for this. Note that the return value of this operation will contain the SYSTEM_ID(which is not the same thing as the SYSTEM_NAME), which will be required in the next step.","Now we have to setup the system variable mentioned in the above response file. Depending on the instance templates and response files you are using you might have to set up way more than one variable - or none at all. E.g. the PARAMETER_ID of the parameter that would have to be set in the example above is \"text-param\".","Next, we apply the individual instance templates, each with its response files."]},{"i":"install-activate-start","l":"Install, Activate, Start","p":["Check out the page on Deployment for details on this topic.","Figure out the ID of the system you just created in case you don't have it at hand anymore:","Figure out all instances in the instance group belonging to that system. In the result the ID of the system should be contained in the system column to identify instances of the system.","Note for the above command: If you are executing this command on the central server you can add --server=<NAME_OF_MANAGED_SERVER> to limit the output to this the given managed server.","For each of the instances, install & activate them. The --uuid receives the value from the \"ID\" column of the previous command. --version receives the instance version you want to install, which is most likely the highest version number (\"Ver.\" column in output of previous command) for this instance.","Finally, start the instance - this will start all processes of the given instance which are set to be started automatically. Again - do this for all instances created.","Note that the aforementioned command only starts processes that have the start type INSTANCE. To start manual applications, the specific ID of the application must be provided, like so:"]}],[{"l":"Advanced Usage","p":["This chapter provides insight in advanced topics of BDeploy."]}],[{"l":"Advanced Terms","p":["Term","Meaning","BHive","The actual storage backend. Provides data de-duplication and delta-based transfers. Synchronizing two BHives will transfer just the files that are not present in the other (potentially remote) hive.","Manifest","A Manifest is a unique Key which identifies a Tree of Files inside a BHive.","Software Repository","A Software Repository is a named BHive which is dedicated to storing Manifests which contain arbitrary deliverables. This is not necessarily a piece of software. It may be any set of files and directories. When building a Product, its declared dependencies are resolved by querying all Software Repositories on the target BDeploy server. In addition to arbitrary software, Software Repositories can also host Products, just like Instance Groups. The purpose of this feature is to provide a shared place which can be used to provide Products to multiple Instance Groups."]}],[{"l":"Integration of a new product","p":["A configuration file which references all the YAML files which should be part of a product pre-validation","Actually not part of any product itself. Freestanding description that can be used to create multiple instances of multiple products in one go","app-info.yaml","application-template.yaml","instance-template.yaml","instance-variable-definitions.yaml","instance-variable-template.yaml","Optional YAML file(s) which can be used to define Application Templates","Optional YAML file(s) which can be used to define Instance Templates","Optional YAML file(s) which can be used to provide instance variable definitions for the product. Whenever instance uses the product, it will generate instance variables (if missing) based on those definitions.","Optional YAML file(s) which can be used to provide shared definitions for instance variables which are re-usable in instance-template.yaml files","Optional YAML file(s) which can be used to provide shared definitions for parameters which are re-usable in app-info.yaml files","parameter-template.yaml","product-info.yaml","product-validation.yaml","product-version.yaml","system-template.yaml","This chapter is intended for those who want to integrate their own Product to be deployed with BDeploy. Therefor a couple of YAML files are required. These files describe your product and all its applications together with some additional metadata. These artifacts are required:","This picture illustrates the relation between the various YAML files which are (can be) used to define a product. Almost all product information and data revolves around BDeploy enabling a user to configure instances and applications.","YAML file required for every Product Version","YAML file to describe a single Application. It is required once for every client and server Application of the product.","YAML file with metadata for the whole product","YAML relation overview","You can find some zipped sample products on the BDeploy Releases Page."]},{"i":"app-infoyaml","l":"app-info.yaml","p":["A conditional parameter is a parameter with a condition on it. The condition always refers to another parameter of the same application. The parameter with the condition set will only be visible and configurable if the condition on the referenced parameter is met.","A human readable name of the Application. Will be displayed in the Configure Application pane, and is also used as default name for any process instantiated from this Application.","A liveness probe can specify an HTTP Endpoint of type PROBE_ALIVE along with an initial delay in seconds and an interval in which the probe is queried. BDeploy starts querying liveness probes only after the application entered running state. This happens either automatically when the process is started (if no startup probe is configured), or once the existing startup probe succeeded. The liveness probe is queried every periodSeconds seconds, and the application is considered to be alive if the endpoint returns a status code >= 200 and < 400. If the probe fails, the Process status is updated to indicate the problem. The exact response reported by the Process is available from the Process details panels Process Probes section.","A product can provide parameter templates which can be re-used by referencing their ID inline in applications parameter definitions. All parameter definitions in the template will be inlined at the place the template is referenced.","A startup probe can specify an HTTP Endpoint of type PROBE_STARTUP which is queried by BDeploy if specified until the endpoint returns a status code >= 200 and < 400. Once this happens, the startup probe is considered to be successful and the Process state advances from starting to running. The exact response reported by the Process is available from the Process details panels Process Probes section.","Allowed configuration directories preset - only valid for CLIENT applications. These relative sub-directories of the configuration files directory tree will be made available to this application when run on a client PC. This can later also be configured per process using the Allowable Configuration Directories configuration.","An Application should not modify files in its own installation directory (although it can do it). BDeploy tries to aggressively pool applications per version to reduce the footprint on the disc. If this does not work for your application, use the pooling configuration to specify different behaviour.","Basically, app-info.yaml allows you to specify which executable to run, and which parameters could potentially be used to configure the Application. The app-info.yaml does not specify an actual configuration, but describes all possible parameters for an Application.","Client applications are always considered for GLOBAL pooling by the client launcher.","List of supported operating systems. This list is solely used to verify during import of the Product, that the Application actually supports the operating system under which it is listed in the product-version.yaml.","Only relevant for CLIENT applications: The branding attribute controls the appearance of CLIENT type Applications when downloaded by the user. It can be used to specify an icon(used to decorate desktop links created by the client installer), and a splash screen. For the splash, you can fine tune the exact location used to display progress text and a progress bar while the application is downloaded to the client PC by the Launcher CLI. Paths are interpreted relative to the root folder of the Application.","Only relevant for SERVER applications: Process control parameters allow to fine tune how SERVER type Applications are started and kept alive by BDeploy. For details, see the list of processControl attributes.","Optional definition of provided endpoints. Currently only HTTP endpoints are supported. These endpoints can be configured on the application later, including additional information like authentication, certificates, etc. BDeploy can later on call these endpoints when instructed to do so by a third-party application.","Optional runtime dependencies. These dependencies are included in the Product when building it. Dependencies are fetched from Software Repositories. launcherPath and parameter defaultValue(and of course the final configuration values) can access paths within each of the dependencies by using the {{M:adoptium/jre}} Variable Expansion, e.g. launcherPath: {{M:adoptium/jre}}/bin/java. Note that the declared dependency does not need to specify an operating system, but must specify a version. This will be resolved by BDeploy to either an exact match if available, or a operating system specific match, e.g. adoptium/jre/linux:1.8.0_202-b08 on LINUX. When referencing the dependency in a Variable Expansion, neither an operating system nor a version is required - in fact it must not be specified.","runtimeDependencies of Applications are always considered GLOBAL poolable.","The app-info.yaml file is one of the most important parts of BDeploy. It describes an Application, especially its start command. This Application may be any application which contains an executable(script, executable, etc.) and which allows 'installation' by copy to a directory. This is important, as BDeploy will 'install' an application by ultimately copying the application to an automatically determined internal directory and launch it from there.","The app-info.yaml file must be placed in the root directory of the Application it describes.","The ID of the endpoint can be used to call the endpoint remotely by tunneling through potentially multiple levels of BDeploy servers.","The optional stop command can be specified to provide a mechanism for a clean application shutdown once BDeploy tries to stop a process. This command may use Variable Expansion to access parameter values of the startCommand(e.g. configured 'stop port', etc.). It is not configurable through the Web UI though. All parameter values will have their (expanded) default values set when the command is run. If no stopCommand is specified, BDeploy will try to gracefully quit the process (i.e. SIGTERM). Both with and without stopCommand, BDeploy resorts to a SIGKILL after the gracePeriod has expired.","The start command of the Application. Contains the path to the executable to launch, as well as all known and supported parameters. For details, see the full list of parameter attributes. To apply e.g. instance-specific values, Variable Expansion is a powerful tool. It can be used for the launcherPath and each parameter's defaultValue. In the Web UI it can be used for the parameter values.","The supported pooling type for server applications. Supported values are GLOBAL, LOCAL and NONE. GLOBAL means that the application is fully poolable and may be installed once (per application version) and used by multiple instance versions of multiple instances. LOCAL means that there is limited pooling support, and the application may only be re-used inside a single instance (by multiple instance versions of that instance, e.g. when changing only configuration). NONE means that there is no pooling support and the application will be installed freshly per instance version, even if just configuration values changed. This gives some control over how to deploy applications which write data into their installation directory at runtime - which should of course be avoided for better pool-ability. This setting is currently ignored by the client application launcher. Client applications are always globally pooled.","The type of the application, may be SERVER or CLIENT. SERVER applications can be deployed to Nodes(including the master) and there be started as server processes. CLIENT applications in comparison cannot be deployed on a Node, but run on a client PC instead.","The type of the endpoint can be used to control how the endpoint is handled by BDeploy.","Variable Expansion can also be used to expand to Instance Variables in default values. These instance variables are required to exist once the application is configured in an instance. They can either be pre-provided using Instance Templates or need to be manually created when required.","Variable Expansion can be used on most of the endpoint properties."]},{"l":"Supported processControl attributes","p":["30000","5","A console-friendly name for a script. This script will be placed in the client PCs PATH (user environment) and can be used to launch the application from the client command line. The application will be started through the BDeploy launcher and will perform updates as usual.","A file extension which should be associated with the client application on the client PC. The client application will still be launched through the BDeploy launcher, and applies updates as usual.","Allowed Values","attachStdin","Attribute","AUTOMATIC","AUTOMATIC, DONT_SET, SET","Can be either MANUAL( Application must be started explicitly through the Web UI or CLI), MANUAL_CONFIRM( Application must be started explicitly through the Web UI and a confirmation has to be entered by the user), or INSTANCE(the Application can be started automatically when the Start Instance command is issued, either manually or during server startup - implies MANUAL).","CLIENT","configDirs","Default Value","Description","false","fileAssocExtension","gracePeriod","How long to wait (in milliseconds) for the Application to stop after issuing the stopCommand. After this timeout expired, the process will be killed.","livenessProbe","MANUAL, MANUAL_CONFIRM, INSTANCE","noOfRetries","offlineStartAllowed","SERVER","Some processControl attributes are only supported for SERVER applications, while others are only for CLIENT applications. The mock app-info.yaml above is marked as a CLIENT application, but it still lists all process control attributes. This would be nonsencial in a real environment - only the applicable attributes should be used.","Specifies a list of configuration sub-directories within the instance's configuration directory which should be made available on the client. Use with care. May expose security sensitive information to clients.","Specifies a probe which can indicate to BDeploy that the application has completed startup.","Specifies a probe which can indicate to BDeploy whether the application is alive. Alive means whether the application is currently performing as it should. BDeploy does not take immediate action on its own if a liveness probe fails. It will only report the failure to the user.","Specifies if a process expects (and can/wants to handle) input on stdin.","startScriptName","startupProbe","String","String (comma-separated list of directories)","String (e.g. .myext)","String (HTTP endpoint ID)","supportedStartTypes","supportsAutostart","supportsKeepAlive","The number of times BDeploy will retry starting the Application if it supportsKeepAlive. The counter is reset after the Application is running for a certain amount of time without exiting.","true, false","Type","Whether the application is allowed to automatically start upon system bootup (on the client PC).","Whether the application is allowed to continue starting in case the server can not be contacted to check for updates.","Whether this Application may be automatically restarted by BDeploy if it exits.","Whether to set the applications working directory when launching. AUTOMATIC will determine this from whether a startScriptName is set. The working directory will not be set if a startScriptName is set to avoid issues with CLI applications.","workingDirectory","x ∈ ℕ₀ ∧ x < 2⁶⁴"]},{"l":"Supported parameters attributes","p":["Parameters appear on the final command line in the exact order as they appear in the app-info.yaml file, regardless of how they are presented in the Web UI, or how they are grouped using the groupName attribute. This allows to build complex command lines with positional parameters through app-info.yaml."]},{"i":"attribute-id","l":"**Attribute**: `id`","p":["Default:","Mandatory: yes","Description: A unique ID of the parameter within the whole product which will contain the Application described by this app-info.yaml."]},{"i":"attribute-name","l":"**Attribute**: `name`","p":["Default:","Mandatory: yes","Description: A human readable name of the parameter used as label in the configuration UI."]},{"i":"attribute-longdescription","l":"**Attribute**: `longDescription`","p":["Default:","Mandatory: no","Description: An optional human readable description of the paramater, which is displayed in an info popover next to the parameter in the Web UI."]},{"i":"attribute-groupname","l":"**Attribute**: `groupName`","p":["Default:","Mandatory: no","Description: An optional group name. The configuration UI may use this information to group parameters with the same groupName together.","Although parameters in the UI are grouped together (and thus might change order), the order in which parameters appear on the final command line is exactly the order in which they are defined in the app-info.yaml file."]},{"i":"attribute-suggestedvalues","l":"**Attribute**: `suggestedValues`","p":["Default:","Mandatory: no","Description: An optional list of suggested values for parameters of type STRING(the default). The Web UI will present this list when editing the parameter value."]},{"i":"attribute-parameter","l":"**Attribute**: `parameter`","p":["Default:","Mandatory: yes","Description: The actual parameter, e.g. --parameter, -Dmy.system.prop, etc.","The value of the parameter is not part of this definition, nor is any potential value separator (e.g. =)."]},{"i":"attribute-hasvalue","l":"**Attribute**: `hasValue`","p":["Default: true","Mandatory: no","Description: Whether the parameter has a value or not. If the parameter has no value, it is treated as BOOLEAN type parameter (i.e. it is either there ( true) or not ( false))."]},{"i":"attribute-valueasseparatearg","l":"**Attribute**: `valueAsSeparateArg`","p":["Default: false","Mandatory: no","Description: Whether the value of the parameter must be placed as a separate argument on the command line. If not, the value (if hasValue) will be concatenated to the parameter using the valueSeparator."]},{"i":"attribute-valueseparator","l":"**Attribute**: `valueSeparator`","p":["Default:=","Mandatory: no","Description: The character (sequence) to use to concatenate the parameter and the actually configured value of it together. Used if not valueAsSeparateArg."]},{"i":"attribute-defaultvalue","l":"**Attribute**: `defaultValue`","p":["Default:","Mandatory: no","Description: A default value for the parameter. The default value may contain variable references according to the Variable Expansion rules."]},{"i":"attribute-global","l":"**Attribute**: `global`","p":["Default: false","Mandatory: no","Description: Whether this parameter is global. This means that inside a single Instance, every process requiring this parameter will receive the same value. The configuration UI will provide input fields for the parameter for every Application which requires the parameter, and propagate value changes to all other Applications requiring it."]},{"i":"attribute-mandatory","l":"**Attribute**: `mandatory`","p":["Default: false","Mandatory: no","Description: Whether the parameter is required. If the parameter is not required, it is by default not put on the command line and must be added manually through a dedicated dialog on the configuration page."]},{"i":"attribute-fixed","l":"**Attribute**: `fixed`","p":["Default: false","Mandatory: no","Description: Whether the parameter is fixed. This means that the parameter can not be changed by the user.","Consider a command line like this:","In this case you will want the user to be able to edit the value of -Dmy.prop parameter, but the user may never be able to edit the -jar application.jar part. A definition for this command line would look like this:","The fixed flag will cause the parameter to always use the defined default value and disable editing in the configuration UI."]},{"i":"attribute-type","l":"**Attribute**: `type`","p":["Default: STRING","Mandatory: no","Description: Type of parameter. This defines the type of input field used to edit the parameter. Available are STRING, NUMERIC, BOOLEAN, PASSWORD, CLIENT_PORT, SERVER_PORT. Since 5.6.0, ENVIRONMENT is available as an additional type.","The CLIENT_PORT and SERVER_PORT types are treated like NUMERIC parameters throughout the whole application, with the exception of the dialogs that deal with ports specifically.","The ENVIRONMENT type will cause a parameter to be put in the process' environment instead of its command line. The name of the environment variable is specified using the parameter field. The fields hasValue, valueAsSeparateArg and valueSeparator must not be set on ENVIRONMENT parameters, and are ignored. Instead the Operating System specific Environment Variable handling is applied."]},{"i":"attribute-customeditor","l":"**Attribute**: `customEditor`","p":["Default: STRING","Mandatory: no","Description: The id of a custom editor to be used when editing this parameter through the BDeploy Web UI. Custom editors can be contributed by Plugins which are either globally installed in the BDeploy server, or contributed dynamically by the product."]},{"i":"attribute-condition","l":"**Attribute**: `condition`","p":["A condition expression (isolated) looks like this:","A Link Expression which is resolved and matched against the condition.⚠️ WARNING parameter may not be set if the newer expression is used, and vice versa.","Be aware that the condition on a parameter has a higher precedence than mandatory. A mandatory parameter whos condition is not met is still not configurable. As soon as the condition is met, it is automatically added to the configuration using its default value.","BE_EMPTY","BE_NON_EMPTY","CONTAIN","Default:","Description","Description: A conditional parameter is a parameter with a condition on it. The condition always refers to another parameter on the same application. The parameter with the condition set will only be visible and configurable if the condition on the referenced parameter is met.","END_WITH","EQUAL","expression","If possible, a parameter with a condition should be defined after the parameter referenced in the condition if the referenced parameter is mandatory. This will make a difference when an application configuration is initially created by drag & drop.","Mandatory: no","must","Name","Or, in its newer form, the very same (but ultimately more powerful) using expression would look like this:","parameter","START_WITH","The condition block understands the following fields:","The must field understands the following condition types:","The power comes from the ability to provide an arbitrary amount of Variable Expansions in the Link Expressions.","The referenced parameters ID.","The referenced parameters value must be any non-empty value. In case of BOOLEAN parameters the value must be true. ℹ️ NOTE Leading and trailing whitespaces are ignored for this check.","The referenced parameters value must be empty. In case of BOOLEAN parameters the value must be false. ℹ️ NOTE Leading and trailing whitespaces are ignored for this check.","The referenced parameters value must contain the given condition value.","The referenced parameters value must end with the given condition value.","The referenced parameters value must equal the given condition value.","The referenced parameters value must start with the given condition value.","The type of condition.","The value to match against if required by the condition type.","value"]},{"i":"supported-endpointshttp-attributes","l":"Supported endpoints.http attributes","p":["Any Link Expression. If the expression evaluates to a non-empty value which does not equal false, the endpoint is considered available/enabled and presented to the user both for configuration and usage. This can be used to tie an endpoint to the configuration of a certain parameter, e.g. the server port configuration which will host the endpoint.","Attribute","authPass","authType","authUser","Currently DEFAULT, PROBE_STARTUP and PROBE_ALIVE are supported. Endpoints referenced by startup or liveness probes in the processControl section of a server process need to have the according type. If not specified, the DEFAULT type is assumed.","Description","enabled","Endpoints definitions are templates which can later on be configured by the user. The only values not editable by the user are id and path.","Endpoints which are not considered enabled are not required to be configured by the user, but are still reported via the public API.","id","path","Path to a KeyStore in the JKS format, containing certificates to trust. Variable Expansion can be used.","port","secure","The passphrase used to load the trustStore. Variable Expansion can be used.","The password to use for BASIC or DIGEST authType. Variable Expansion can be used.","The path of the endpoint on the target process. BDeploy uses this and other parameters ( port) to construct an URI to the local server.","The port this endpoint is hosted on. Variable Expansion can be used, for instance to reference a parameter of the application (using {{V:port-param}} where port-param is the ID of a parameter on the startCommand).","The type of authentication used by BDeploy when calling the endpoint. Can be NONE, BASIC or DIGEST.","The unique ID of the endpoint. This ID can be used by an authorized third-party application to instruct BDeploy to call this endpoint and return the result.","The username to use for BASIC or DIGEST authType. Variable Expansion can be used.","trustAll","trustStore","trustStorePass","type","Whether HTTPS should be used when calling the endpoint","Whether to trust any certificate when using HTTPS to call the endpoint. Otherwise a custom trustStore must be set if a self-signed certificate is used by the application."]},{"i":"product-infoyaml","l":"product-info.yaml","p":["There is no actual requirement for the file to be named product-info.yaml. This is just the default, but you can specify another name on the command line or in build tool integrations.","The product-info.yaml file describes which Applications are part of the final Product, as well as some additional Product metadata.","A human readable name of the Product for display purposes in the Web UI.","A unique ID of the Product which is used to base Instances of. This should not change, as changing the Product ID of an existing Instance is not supported.","The vendor of the product. Displayed in the Web UI and used when installing client applications.","The list of Applications which are part of the Product. These IDs can be anything, they just have to match the IDs used in the product-version.yaml referenced below.","Optional: A relative path to a directory containing configuration file templates, which will be used as the default set of configuration files when creating an Instance from the resulting Product.","Optional: A relative path to a directory containing one or more plugin JAR files. These plugins are loaded by the server on demand and provided for use when configuring applications which use this very product version.","A reference to an application template YAML file which defines an application-template.yaml.","A reference to an instance template YAML file which defines an instance-template.yaml.","A reference to a parameter template YAML file which defines a parameter-template.yaml.","A reference to an instance variable template YAML file which defines an instance-variable-template.yaml.","A reference to an instance variable definitions YAML file which defines an instance-variable-definitions.yaml","The product-version.yaml which associates the Application IDs (used above) with actual paths to Applications on the file system."]},{"i":"product-versionyaml","l":"product-version.yaml","p":["There is no actual requirement for the file to be named product-version.yaml as it is referenced from the product-info.yaml by relative path anyway. This is just the default name.","The product-version.yaml file associates Application IDs used in the product-info.yaml with actual locations on the local disc. This is used to find and import each included Application when importing the Product.","The reason why this file is separate from the product-info.yaml is because its content (e.g. version) is specific to a single product Build. Therefore the product-version.yaml ideally is created during the build process of the product by the build system of your choice. This is different to the app-info.yaml files and the product-info.yaml file as they are written manually.","A unique Tag to identify the product version. There is no requirement for any version-like syntax here, it can be basically anything. It should just be unique per Product Version.","The Application ID must match the one used in product-info.yaml.","You may have different binaries for a single application depending on the target operating system. It is not required to provide every application for every operating system. You can just leave out operating systems you don't care about.","You can also use the exact same Application directory and app-info.yaml to satisfy multiple operating system targets for one Application."]},{"i":"application-templateyaml","l":"application-template.yaml","p":["There is no actual requirement for the file to be named application-template.yaml as it is referenced from the product-info.yaml by relative path anyway. Multiple Application Template YAML files can exist and be referenced by product-info.yaml.","This file defines a single Application Template. A product-info.yaml can reference multiple templates, from which the user can choose.","An Application Template must have an ID. This can be used to reference it from an Instance Template.","name is the value user sees when they choose the template in UI. processName is the name of the resulting process configuration.","The preferred process control group is used to determine which process control group to use when applying the application template. This is only used if a Process Control Group with this name exists in the instance configuration. Process Control Groups can be pre-configured in an instance-template.yaml.","A list of operating systems that this application may run on. If the node is running on an operating system that is not contained in the list, then the process will not be imported whenever an instance template references this application. If no list is present, then all operating systems are considered valid.","A template can define (and use) template variables which are mandatory input by the user when using the template. A template variable can be referenced in parameter value definitions using the {{T:varname}} syntax. If the parameter value is numeric, you can also use simple arithmetic operations on the template variable like {{T:varname:+10}} which will add 10 to the numeric value of the template variable.","A template can define arbitrary process control parameters to further control the default process control settings.","Start command parameters are referenced by their ID, defined in app-info.yaml. If a value is given, this value is applied. If not, the default value is used. If a parameter is optional, it will be added to the configuration if it is referenced in the template, regardless of whether a value is given or not.","An Application Template can also extend another previously defined template. This works the same as the template specifier in instance-template.yaml and also allows for fixedVariables.","The template attribute specifies another application template (which must be registered in the product) to extend. All properties of that other template are merged into this application template. Properties of this template take precedence in case of a conflict.","fixedVariables, as also described for instance-template.yaml, allow to override the value of a specific template variable in this and the base template. Values queried from the user when applying this template will be ignored for any variable which has an overridden, fixed value."]},{"l":"Supported templateVariables Attributes","p":["Attribute","Description","id","The unique ID of the template variable. If multiple applications (or instances) define the same variable ID, it is queried from the user only once.","name","The user visible name of the variable, used when querying user input while applying the template.","Further detailed description of the template variable, explaining to the user the purpose of the variable.","type","Type of template variable. This defines the type of input field used to edit the variable. Available are STRING(default), NUMERIC, BOOLEAN and PASSWORD.","defaultValue","An optional default value which is pre-filled when querying the user for template variable values.","suggestedValues","A list of values which will be suggested to the user once they begin providing a value for this variable.","Defined templateVariables can be used in the name of the application template, as well as in each startParameter s value attribute."]},{"l":"Supported fixedVariables Attributes","p":["Fixed variables allow overriding template variable input from the user to a fixed value.","Attribute","Description","id","The unique ID of the template variable. The variable may be declared in either this or any parent template.","value","The target fixed value for the variable to be used in this and any parent template. This value overrides any user input."]},{"l":"Supported startParameters Attributes","p":["The list of startParameters provides control over the parameters in the resulting process. This is different from the parameter definition in app-info.yaml as this list only provides information about presence and value of parameters when applying this template.","Attribute","Description","id","The unique ID of the parameter. A definition of a parameter with this ID must exist in the app-info.yaml file of the referenced application. If the parameter is optional, it will be added to the process when applying the template.","value","The target value of the parameter. If no value is given, the defaultValue from the parameter's definition is applied."]},{"i":"instance-templateyaml","l":"instance-template.yaml","p":["A list of operating systems where this application will be applied. If the node is running on an operating system that is not contained in the list, then the application will not be imported. If no list is present, then all operating systems are considered valid.","A template can define (and use) template variables which are mandatory input by the user when using the template. A template variable can be referenced in parameter value definitions using the {{T:varname}} syntax. If the parameter value is numeric, you can also use simple arithmetic operations on the template variable like {{T:varname:+10}} which will add 10 to the numeric value of the template variable.","A template defines one or more groups of applications to configure. Each group can be assigned to a physical node available on the target system. Groups can be skipped by not assigning them to a node, so they provide a mechanism to provide logical groups of processes (as result of configuring the applications) that belong together and might be optional. It is up to the user whether a group is mapped to a node, or not. Multiple groups can be mapped to the same physical node.","A template group can have either type SERVER(default) or CLIENT. A group may only contain applications of a compatible type, i.e. only SERVER applications in SERVER type group. When applying the group to a node, applications will be instantiated to processes according to their supported OS and the nodes physical OS. If a SERVER application does not support the target nodes OS, it is ignored.","A template group contains one or more applications to configure, where each application can consist of process control configuration and parameter definitions for the start command of the resulting process - exactly the same fields are valid as for Application Templates- except for the id which is not required.","An instance template will be presented to the user when visiting an Empty Instance.","Each Instance Template has a name and a description, which are shown on the Instance Template Wizard.","Instance Templates can reference Application Templates by their id. The Instance Templates can further refine an Application Template by setting any of the valid application fields in addition to the template reference.","Instance Variables can also be defined in an instance-variable-template.yaml file externally, and referenced via its ID.","Instance Variables can be defined in an instance template. Those definitions will be applied to a new instance when this template is used. Link Expressions can then be used to expand to the Instance Variables values in parameters, configuration files, etc.","instanceVariableDefaults allows to override the value of a previous Instance Variables definition in the same template. This is most useful when applying instance-variable-template.yaml files using the template syntax in instanceVariables. The instance variable template can be shared more easily if instance templates have means of providing distinct values per instance template.","instanceVariables and instanceVariableDefaults have been deprecated (since 7.2.0) in favor of instanceVariableValues and instance-variable-definitions.yaml.","instanceVariableValues allows to override the value of an instance variable created from instance-variable-definitions.yaml","Process Control Groups can be pre-configured for an instance template. If an application template later on wishes to be put into a certain Process Control Group, the group is created based on the template provided in the instance template. Note that the defaults for a Process Control Group in a template are slightly different from the implicit 'Default' Process Control Group in BDeploy. The defaults are: startType: PARALLEL, startWait: WAIT, stopType: PARALLEL.","Start command parameters are referenced by their ID, defined in app-info.yaml. If a value is given, this value is applied. If not, the default value is used. If a parameter is optional, it will be added to the configuration if it is referenced in the template, regardless of whether a value is given or not.","There is no actual requirement for the file to be named instance-template.yaml as it is referenced from the product-info.yaml by relative path anyway. Multiple Instance Template YAML files can exist and be referenced by product-info.yaml.","This file defines a single Instance Template. A product-info.yaml can reference multiple templates, from which the user can choose.","Using applyTo, an application can be restricted to be applied only to certain nodes, running a specified operating system. A list of supported operating systems can be specified. If this is not specified, the application is assumed to be capable of being applied to nodes running any of all supported operating systems.","When referencing an application template, it is possible to define overrides for the template variables ({{X:...}}) used in the template. Use provided values will not be taken into account for this variable when applying the template, instead the fixed value will be used."]},{"i":"supported-templatevariables-attributes-1","l":"Supported templateVariables Attributes","p":["templateVariables follows the same scheme as Supported templateVariables Attributes in application-template.yaml files.","Defined templateVariables can be used in each instanceVariables(and instanceVariableDefaults) value attribute, and per inline application in each field which is supported by application-template.yaml s templateVariables."]},{"l":"Supported instanceVariables Attributes","p":["Attribute","Description","template","Allows referencing a collection of template instance variables defined in a single instance-variable-template.yaml ℹ️ NOTE If this attribute is given, no other attribute may be given, as this item is replaced by the definitions from the instance variable template.","id","The unique ID of the instance variable to be created.","value","The value with which the instance variable should be created. This value can use template variables defined in the containing instance-template.yaml.","A detailed description of the variable presented to the user in the Instance Variables overview.","type","The type of the variable, the same types as if defining a parameter can be used, see Supported parameters attributes.","customEditor","A potentially required custom editor from a plug-in which needs to be used to edit the value of the instance variable, also see Supported parameters attributes."]},{"l":"Supported instanceVariableDefaults Attributes","p":["Attribute","Description","id","The unique ID of a previously defined instance variable (either directly in the same template, or through an applied instance-variable-template.yaml).","value","The value to use when applying this instance template."]},{"l":"Supported instanceVariableValues Attributes","p":["Attribute","Description","id","The unique ID of an instance variable definition defined in instance-variable-definitions.yaml.","value","The value to use when applying this instance template."]},{"l":"Supported processControlGroups Attributes","p":["Attribute","Description","name","The name of the Process Control Groups to create. This group can be referenced by application-template.yaml files preferredProcessControlGroup attribute.","startType","The initial Start Type, see Process Control Groups.","startWait","The initial Start Wait, see Process Control Groups.","stopType","The initial Stop Type, see Process Control Groups."]},{"l":"Supported groups Attributes","p":["groups is a list of template groups. This groups together a set of Application Templates or inline template definitions. Each group has a set of own attributes, as well as a list of templates:","Attribute","Description","name","The name of the group. This will be presented to the user, and a user has the possibility to select which groups of the template should be applied to which node in an instance.","A description which helps the user in deciding whether to apply a certain group or not.","type","Either SERVER or CLIENT right now. The target node where the group is applied must match this type.","applications","A list of templates. A template can either be a reference to an application-template.yaml defined template, or - alternatively - can be defined inline. In this case all attributes of an application-template.yaml apply to a single item in the applications list."]},{"i":"parameter-templateyaml","l":"parameter-template.yaml","p":["A parameter-template.yaml allows products to define re-usable blocks of parameters associated to a unique ID. These can then be applied in app-info.yaml files. For the user of BDeploy, those parameters will appear as if they were defined directly in the app-info.yaml of the application.","The ID can be used to reference the template afterwards from an app-info.yaml.","The parameters can contain an arbitrary amount of parameter definitions, which follow exactly the same schema as supported parameters attributes in app-info.yaml.","Inlining of templates into applications happens before anything else. Parameter templates can also reference other parameters (e.g. {{V:my-param}}), even if they are not part of this very template. All applications using this parameter would then either have to have (directly or through another template) this my-param parameter, or will receive a validation warning and need to change the value.","To be able to use a template, the template needs to also be registered in the product-info.yaml so it is included at build time."]},{"i":"instance-variable-templateyaml","l":"instance-variable-template.yaml","p":["An instance-variable-template.yaml works the same as a parameter-template.yaml in that it provides common definitions for instance variables, which can be re-used in instance-template.yaml files. Those definitions are inlined early on, so variables from instance-variable-template.yaml files can do exactly the same things as instanceVariables in a instance-template.yaml.","The ID can be used to reference the template afterwards from an instance-template.yaml.","An arbitrary amount of instance variable templates. The schema is the same as supported instanceVariables Attributes in instance-template.yaml","To be able to use a template, the template needs to also be registered in the product-info.yaml so it is included at build time.","Deprecated in favor of instance-variable-definitions.yaml"]},{"i":"instance-variable-definitionsyaml","l":"instance-variable-definitions.yaml","p":["There is no actual requirement for the file to be named instance-variable-definitions.yaml as it is referenced from the product-info.yaml by relative path anyway. Multiple Instance Variable Definitions YAML files can exist and be referenced by product-info.yaml.","An instance-variable-definitions.yaml provides definitions for instance variables, based on which instance variables will be created. The definition values can be overriden using instanceVariableValues in an instance-template.yaml.","File consists of a single list of definitions containing an arbitrary amount of instance variable definitions."]},{"l":"Supported definitions Attributes","p":["A default value for the variable. The default value may contain variable references according to the Variable Expansion rules.","A human readable name of the instance variable used as label in the configuration UI.","A potentially required custom editor from a plug-in which needs to be used to edit the value of the instance variable.","An optional group name. The configuration UI may use this information to group variables with the same group name together.","An optional human readable description of the instance variable, which is displayed in an info popover next to the instance variable in the Web UI.","An optional list of suggested values for variable of type STRING (the default). The Web UI will present this list when editing the variable value.","Attribute","customEditor","defaultValue","Description","fixed","groupName","id","Instance variable definitions support a subset of supported parameters attributes","longDescription","name","suggestedValues","The unique ID of the instance variable definition. Instance variable created from definition will have the same ID.","type","Type of instance variable. This defines the type of input field used to edit the variable. Available are STRING, NUMERIC, BOOLEAN, PASSWORD, CLIENT_PORT, SERVER_PORT.","Whether the instance variable is fixed. This means that the variable can not be changed by the user."]},{"i":"system-templateyaml","l":"system-template.yaml","p":["A (freestanding) system-template.yaml allows you to specify a broader scoped template than a (product-bound) instance-template.yaml. A system-template.yaml can reference multiple products, and Instance Templates therin to create systems containing of many instances from different products.","The single core artifact created on BDeploy using a System Template is - of course - a System. It is possible to define an arbitrary amount of System Variables using the template.","Template variables in System Templates work similar to template variables in instance-template.yaml. They can be used within the system-template.yaml in instance names, fixedVariables and defaultMappings.","A simple instance reference must consist of a name, a productId and a templateName, meaning \"create an instance with name name, from the product productId using the template templateName\".","fixedVariables allows you to specify a \"fixed\" value for template variables used in the referenced Instance Template. This will skip querying the user for a value for that variable, and instead use this fixed value.","defaultMappings can be used to pre-assign Instance Template groups to available nodes. If a node with the specified name is not available during application of the System Template, no node will be preselected. To specify the Client Application node, you can either specify 'Client Applications' or the internal name '__ClientApplications'.","When applying a System Template from the CLI, all mappings need to be provided through defaultMappings, and all Template Variables of the System Template as well as downstream Template Variables(required by the individual Instance Templates) need to either have a default value or be provided using fixedVariables, as the CLI is non-interactive when applying System Templates"]},{"l":"Supported systemVariables Attributes","p":["A human readable description explaining the purpose of each variable.","An optional group name. The configuration UI may use this information to group variables with the same group name together.","An optional list of suggested values for variable of type STRING (the default). The Web UI will present this list when editing the variable value.","Attribute","customEditor","Description","fixed","groupName","id","Reserved, currently not supported.","suggestedValues","The pre-assigned value of the variable.","The unique ID of the system variable to create.","type","Type of system variable. This defines the type of input field used to edit the variable. Available are STRING, NUMERIC, BOOLEAN, PASSWORD, CLIENT_PORT, SERVER_PORT.","value","Whether the system variable is fixed. This means that the variable can not be changed by the user."]},{"i":"supported-templatevariables-attributes-2","l":"Supported templateVariables Attributes","p":["templateVariables follows the same scheme as supported templateVariables attributes in application-template.yaml files.","Defined templateVariables can be used in each instances name, description and defaultMapping node attributes. fixedVariables on each instances value can be used to propagate values further down the line into instance-template.yaml."]},{"l":"Supported instance Attributes","p":["An optional regular expression which narrows down allowable versions of the specified product. Useful in case multiple major versions of a product exist on a server, and only a certain one is supported. Otherwise, the newest product version is selected.","Attribute","defaultMappings","Describes the purpose or meaning of the to-be-created instance.","Description","Each element provides a description of an instance to be created from a specific product and a specific instance template.","fixedVariables","name","Pairs of group and node attributes which specify which Instance Template group should be applied to which node. In case the specified node does not exist on the target server, the mapping is unset.","Pairs of id and value attributes which set Template Variables of the referenced Instance Template to a fixed value instead of querying a value from the user during application.","productId","productVersionRegex","templateName","The ID of the product to be used. Note that this is not the Name. It corresponds to the product field in product-info.yaml.","The name of the Instance Template to apply to create this instance. This template must exist in the selected product version.","The name of the instance to create. May use Template Variables from the System Template."]},{"i":"product-validationyaml","l":"product-validation.yaml","p":["The product-validation.yaml file contains references to all files that should be sent to the server when performing a product pre-validation. This validation can be used to verify that the product and all its applications contain valid BDeploy YAML.","The content of this file is very straight forward:","This file can be passed to the remote-product-validation CLI command, as well as to the BDeployValidationTask Gradle task."]},{"l":"Building a Product","p":["Now that you have a well-defined Product with one or more Applications, you will want to build/package that Product to be usable with BDeploy."]},{"l":"Via ZIP File and Web UI","p":["The well-defined Product directory including Applications can be zipped and imported directly from the web interface.","The following conditions must be fulfilled for a successful import:","ZIP files must be self-contained, e.g. only relative paths are allowed and no leaving of the zipped structure via \"..\" paths.","YAML files must follow standard naming (product-info.yaml)."]},{"l":"Via CLI","p":["Once you have a product-info.yaml with it's product-version.yaml and all the app-info.yaml files in their respective Application directories, you can use the CLI to import the product as a single piece.","Use bdeploy product to import the product by specifying a local BHive and the product-info.yaml to import from.","Use bhive push to push the resulting Product Manifest from the local BHive to an Instance Group on a remote BDeploy server."]},{"l":"Via Gradle","p":["Add the below code to your existing build.gradle.","All ...Server blocks can set useLogin = true to use local logins created on the system using the bdeploy login command. You can provide a login name using login = xx, or specify uri and token instead of useLogin to have full control. Where useLogin is valid, loginStorage can also be used to set a different directory where BDeploy logins are stored and can be read from.","Applies the plugin BDeploy gradle plugin.","BDeploy provides a Gradle plugin. This plugin can be used to build a product out of your application.","By default, the BDeploy plugin will make this application available for all the supported platforms specified in app-info.yaml. If required (usually it is not) you can configure a different set of Operating Systems to build for in the test application configuration in build.gradle by adding a set of operating system literals (e.g. 'WINDOWS', 'LINUX') to the os list of the application.","Calculate a build date, which will be substituted instead of the SNAPSHOT in the version. This is optional, you could just plainly use the version set. The actual buildVersion used later when building the product is derived from the project version and the buildDate.","Finally, we need a product-info.yaml describing the product itself. We'll put this file into a bdeploy subfolder. This is not required, it can reside anywhere in the project. You just need to adapt the path to it in the build.gradle.","Given a sample Java application which has been created from the default gradle template using gradle init, these are the changes you need to build a BDeploy product for this single application. For this demo, the application is named test.","If buildProduct built a product, this task will package it as a ZIP file. Note that a ZIP will always contain all of the product, whereas pushProduct can push only required deltas which are not present on the target server.","Lets start off with the app-info.yaml, which describes the test application.","Multiple target servers can be specified in the target.servers section. The plugin will push to each of them.","Next we need the required descriptors for the product and the application. For this sample, the information will be the bare minimum, please see app-info.yaml and product-info.yaml for all supported content.","Sets the project version. Gradle does not strictly require a version, and uses 'unspecified' as default. BDeploy requires some sort of version, and setting it for the whole project is good practice.","That's all that is required to build a product. You can now run ./gradlew zipProduct on the CLI to try it out. The result will be a build/product-1.0.0-XXX.zip where XXX is the buildDate we set previously. The content of the ZIP file is a BHive, which is the internal data format used by BDeploy. You can upload this product to any BDeploy server using its Web UI.","The BDeployValidationTask can be used to validate product information before actually building the product. The product-validation.yaml file must contain a reference to the product-info.yaml used, as well as references to all app-info.yaml files.","The build folder also contains the BHive in unzipped form in the build/productBHive folder. This folder is temporary but will hold all product versions built since the last ./gradlew clean. You can use this BHive for manual pushing.","The product-info.yaml needs to list included applications. These applications also need to be available from the product-version.yaml.","The pushProduct task can push required deltas to one or more configured target servers. The server configuration is the same as for all other ..Server blocks (see note below). In addition the target instanceGroup must be specified for pushing.","The pushProduct task will do the same thing (build the product) but then push it to a target server. For this, you need to specify the server, token and instanceGroup project properties to match your setup. You can get a token by using the Create Token... action on the user menu in BDeploy. Make sure to create a full token pack for this tool to work.","The reason why you want to put this file into a separate folder is because it allows to reference various other files by relative path. Those files (and folders) must reside next to the product-info.yaml. Over time this can grow, and may clutter your source folders if you do not separate it.","The versionFile parameter must be set. If the relative path given here does not exist, the BDeploy Gradle plugin will generate this file for you, using the given version and applications. Otherwise you can provide this file and have more manual control over applications. In case the plugin generates the file for you, it will be deleted right after the build.","This demo app-info.yaml only defines the path to the launcher, which for this demo project (named test) is bin/test on LINUX, and bin/test.bat on WINDOWS.","This file must be part of the binary distribution of an application and reside in its root directory. To achieve this, the simplest way (using the gradle application plugin) is to put the file in the subdirectory src/main/dist in the project folder.","This is the unique ID of the product. This is basically a 'primary key' and should not change over time.","This task will actually build the product with the configured version. The actual data about the product is loaded from bdeploy/product-info.yaml, which we will create in a second. Note that this task depends on installDist, which will unpack the binary distribution of the application in this project into a folder, so BDeploy can import the individual files. Depending on the type of application and the way it is built, there might be different ways to achieve this. The repositoryServer will be queried for additionally specified runtimeDependencies at build time. Those dependencies will be downloaded and embedded into the final product.","Using ./gradlew clean buildProduct you can build the same product version over and over again. However once pushed to a remote server, the same product version must not be reused. If you try to build and push the same version more than once, the server will silently ignore your attempt to push, as it assumes that it already has all the content (it has a product with this version already, and all artifacts are assumed to be immutable in BDeploy)."]},{"l":"Via Eclipse TEA","p":["BDeploy provides integration into Eclipse TEA. Using this integration, you can easily export Eclipse RCP based products as Applications and bundle them into a custom Product.","Once you have required files, select TEA > TEA Build Library > Build BDeploy Product.... You will be prompted which Product to build and where to put the resulting product. You can choose to create a self-contained ZIP, or to push deltas to a selected server.","TEA Integration Product Build","You can configure multiple servers by using the [Add], [Delete] and [Edit] buttons.","TEA BDeploy Server configuration","Enter a description and a URL. You will then be able to use the [Login] button to create a token for the server.","TEA BDeploy Login","Now you can use the [Load Groups] to fetch a list of existing instance groups from the server to choose from. Finally, use the verify button to check whether the entered information is correct.","When confirming the build dialog, on first run you will be prompted to login to the Software Repositories BDeploy server configured in the TEA BDeploy preferences.","Since product builds are stored in the workspace, you can choose to re-push a previous build of the product (to the same or another server). Select TEA > TEA Build Library > Push BDeploy Product... to do so. You will be presented a list of available local product versions and the configured BDeploy servers.","TEA Integration Product Push"]},{"i":"productsyaml","l":"products.yaml","p":["There is no actual requirement for the file to be named products.yaml. This is just the default, but you can specify another name in the Eclipse TEA preferences.","This file is required and lists the product-build.yaml files which are available to the integration.","The path to the products.yaml has to be configured in the Eclipse TEA preferences.","TEA Integration Products Preference","The preferences also allow to configure a BDeploy server whos Software Repositories are used during resolution of Runtime Dependencies. You will be asked to log into this server once when starting a product build."]},{"i":"product-buildyaml","l":"product-build.yaml","p":["This file references a product-info.yaml file and describes how to build the actual applications referenced in the product-info.yaml.","The value for applications.application.product is Eclipse TEA specific and references the Eclipse TEA product alias property."]}],[{"l":"Variable Expansions","p":["BDeploy provides a mechanism for variable expansion, used in Link Expressions and Configuration Files. Variable expansion can happen at the following locations:","Launcher path specified in app-info.yaml","Any parameter value - either user-set value or the defaultValue specified in app-info.yaml","Any configuration file content","Most of the HTTP Endpoints attributes","Instance Variables","System Variables (limited to certain expansions which are available globally)","Any of the above will be processed as late as possible, i.e. on the target node, right before writing the final content to the target directories.","The general syntax for variables is {{TYPE:VARNAME:SUBVAR}}. There are various types, usually denoted by a single character. The following section gives an overview of types, variables, and possible sub-variables. Additionally, limited arithmetic expressions (only + and -) can be added as last component, e.g. {{X:myvar:+3}}. Arithmetic expressions may not be available depending on the data type used at the specific location (e.g. not available if the variable in question is of type STRING).","BDeploy has a link expression editor built in. All elements in the UI (except the configuration file editor) can be switched from plain value editor to link expression editor, which gives rich content assist for link expressions (which contain one or more variable expansions). The configuration file editor uses rich content assist by default on [CTRL] + [Space] if the current word starts with {{."]},{"i":"m-manifest-reference","l":"M: Manifest Reference","p":["Used whenever it is required to get the absolute installation path to another manifest’s path on the target system. The name of the variable indicates the manifest which should be referenced. An optional tag - separated with a ':' - can be added to refer to a specific version.","Variable","Description","{{M:adoptium/jre8}}","Expands to the absolute path where the the manifest named 'adoptium/jre8' is installed on the server. The exact version is specified through a runtime dependency in the app-info.yaml.","{{M:SELF}}","Expands to the absolute path where the manifest is installed on the server which contains the app-info.yaml for this application. This substitution shortcut is only supported in app-info.yaml files."]},{"i":"p-deployment-path","l":"P: Deployment Path","p":["Used to expand to one of the special directories that are defined.","Variable","Description","{{P:CONFIG}}","Directory where all configuration files are stored.","{{P:BIN}}","Directory where all binaries are stored.","{{P:RUNTIME}}","Directory with runtime data (e.g. stdout/stderr capture files) is stored.","{{P:DATA}}","Directory shared by multiple deployments of the same instance.","{{P:LOG_DATA}}","Configurable directory for log files on the server. The log data directory is shared by all instances, however, each instance has its own subdirectory therein. This expansion references the unique subdirectory applicable for the current instance. Configuration can be done via the cli. If not configured, the expansion defaults to be equal to {{P:DATA}}."]},{"i":"v-parameter-value","l":"V: Parameter Value","p":["Used to reference a parameter within the same application or withing any other application from the same instance. Typically used when one application publishes a service on a specific port ( server) and other applications ( clients) should then connect to this port. The configuration of the client applications would then refer to the port of the server application. Thus, when changing the port, only the configuration of the server application has to be edited.","Variable","Description","{{V:my.param.id}}","Takes the value from the my.param.id parameter defined in the same application.","{{V:MyServer:my.param.id}}","Takes the value from the parameter my.param.id that is defined in the MyServer application.","Beware that changing the name of an application will break the parameter reference mechanism. There is no mechanism that automatically adapts the configuration of applications which refer to values of other applications. This must be done manually if required."]},{"i":"i-instance-value","l":"I: Instance Value","p":["Used to expand to values related to the instance containing the parameter's process.","Variable","Description","{{I:SYSTEM_PURPOSE}}","The purpose of the instance. Allowed values: PRODUCTIVE, TEST, DEVELOPMENT.","{{I:ID}}","The ID of the instance.","{{I:NAME}}","The name of the instance.","{{I:PRODUCT_ID}}","The name of the 'MANIFEST' keys name of the configured product.","{{I:PRODUCT_TAG}}","The tag (i.e. 'version') of the configured product."]},{"i":"a-application-value","l":"A: Application Value","p":["Used to expand to values related to the application containing the parameter's.","Variable","Description","{{A:ID}}","The ID of the application.","{{A:NAME}}","The name of the application."]},{"i":"h-minion-properties","l":"H: Minion Properties","p":["Used to expand to properties of the minion where the application is deployed.","Variable","Description","{{H:HOSTNAME}}","Expands to the hostname of the target minion where the application is deployed.","Beware that due to the nature of variable expansion (the point in time this happens), HOSTNAME may not be what you expect, especially on global parameters used by multiple processes (it can be a different hostname for each process, if they are configured to different nodes). Even more precaution is required when using HOSTNAME on client applications, as it will expand to the clients hostname."]},{"l":"Operating System","p":["Enables conditional output of text based on the current operating system. The name of the variable refers to the name of the operating system. Using this variable allows the usage of different arguments for different operating systems while still using a single YAML file.","Variable","Description","{{LINUX:java}}","Expands to java on Linux.","{{WINDOWS:java.exe}}","Expands to java.exe on Windows.","java{{WINDOWS:.exe}}","Expands to java on Linux and java.exe on Windows."]},{"l":"Environmental Values","p":["Enables access to environmental variables defined in the operating system. The name of the variable refers to the name of the environmental variable.","Variable","Description","{{ENV:MY_VARIABLE}}","Expands to the value of the environmental variable when the application is installed on the node or client.","{{DELAYED:ENV:MY_VARIABLE}}","Expands to the value of the environmental variable when the application is launched on the node or client.","Variables are replaced with their actual values when the process is installed on the target minion node. This might not always be desired. Especially for client applications it can be useful to do the actual replacing when the process is launched. This is can be achieved by prefixing the actual variable with the DELAYED prefix. This enables that different users of the client application are getting different parameter values depending on the value of the environmental variable."]},{"i":"x-instance-and-system-variables","l":"X: Instance and System Variables","p":["Used to expand to instance and system variables. The same prefix is used for both. Instance Variables take precedence over System Variables in expansions, if both have a variable with the same ID.","Instance Variables are defined in the Instance Settings and System Variables are defined on Systems level in the Instance Group."]},{"i":"if-conditional-expansion","l":"IF: Conditional Expansion","p":["The conditional expansion can be used to convert a boolean expression to any given value. The format of the conditional is","The condition is any other variable expansion without the curly braces, like for instance X:MyVar to resolve the instance variable MyVar. The result of the expression is expected to be boolean, however non-empty strings will be treated as true as well. The values the expression expands to can be of arbitrary type, and need to be plain values, i.e. they can not contain variable expansions.","Some examples:"]}],[{"l":"Runtime Dependencies","p":["As previously described in app-info.yaml, Applications can declare dependencies to third-party Manifests. These Manifests are hosted in Software Repositories on the BDeploy Server.","To make these Manifests available on the server, you need to:","Use bhive import to import the directory containing the third-party software into a local BHive.","Use bhive push to push the created Manifest to the Software Repository of your choice.","Alternatively, the Web UI provides a mechanism to upload arbitrary software to Software Repositories."]},{"l":"Manifest Naming","p":["Third party software Manifests can have basically any name. However, if you want to provide different Manifests per target operating system, you will have to follow a simple naming rule: append the operating system name to the Manifest name part, e.g.:","my/external/software/windows:1.0.0","my/external/software/linux:1.0.0","It can then be referenced by an app-info.yaml using the short-hand syntax my/external/software:1.0.0 and BDeploy will choose the correct one depending on the target operating system."]},{"l":"Runtime Dependency Packaging","p":["BDeploy will always make sure that your products are self contained. This means that Runtime Dependencies are packaged with the product data at build time. The result is a product which contains all dependencies. This also means that pushing a product to a target server does not require any prerequisites on that target server.","Included runtime dependencies will not show up on the target server's Web UI anywhere. There is no Software Repository created automatically for any third-party software. It is simply included in the product."]},{"l":"Software Repositories","p":["Software Repositories are a storage location for any external software required by products. In addition, BDeploy products can be stored and managed in Software Repositories, from where they can be transferred (imported) to Instance Groups. A Software Repository shares its namespace with Instance Groups, which means that the unique name of a Software Repository must not collide with any name of a Software Repository or Instance Group."]},{"l":"Upload Software","p":["To upload external software, open a software repository and click on the [Upload Software] button in the toolbar. Then click on browse or drop files. You can upload zip packages.","After uploading arbitrary content, you need to specify the name of the software, the version and the supported operating systems. If you already have a package in a BHive format or a package including a product descriptor containing all of this metadata, the available information will be used automatically.","External Software Upload","After all requested information is entered, click Import to import the files to the Software Repository.","External Software Import","If the upload was successful, the software for each operating system will show up.","The available software packages and products can be viewed and downloaded if required.","Software Details"]},{"l":"Software Repositories Access","p":["Software Repositories are created and managed by global administrators. A Software Repository needs READ permission to be visible and readable. WRITE permissions are required to manage the software packages in the repository. Therefore, to upload software, a user requires ADMIN or WRITE permissions either globally or assigned in the Software Repository Permissions panel.","Software Repository Permissions","The Software Repository Permissions panel works similarly to the Instance Group Permissions.","You can make Software Repository public by assigning local READ permission to All Users Group."]}],[{"l":"Troubleshooting","p":["BDeploy provides users with several troubleshooting options to address potential problems."]},{"l":"Verify Installation and Log","p":["As a first step, you should always verify the installation and the log contents. The first part is verifying that the data and the binary directory are separate.","This is an example of how it should be:","The binaries ( bin, lib, ...) are separate from the data directory ( hive, storage). This is important as updates to BDeploy change the contents of the binaries. This could potentially interfere with the data directory if it were to reside within the same directory!","The second part is to check the content of the log directory. audit.log will contain a brief sequence of 'modifying' and generally failed operations. This means it is a good first place to see things that went wrong at a glance. You can use the timestamp found in the audit.log to further continue looking for detailed information in server.log.","Generally, server.log will contain exceptions and stack traces for issues that occurred. In case you are reporting an issue to the BDeploy Team, please make sure to attach both audit.log and server.log to facilitate troubleshooting on our side."]},{"l":"Issues with the Windows Service","p":["In case you are having trouble with the Windows service installation, e.g. the service does not start, verify:","... that the installation follows the example above. The binaries in one directory, e.g. C:\\BDeploy\\bdeploy-win64, and the root/data in a different directory, e.g. C:\\BDeploy\\root.","... that you specified the full path to bdeploy.bat and the root directory to the service installation bat, e.g. bdeploy-service-install.bat --master C:\\BDeploy\\bdeploy-win64\\bin\\bdeploy.bat C:\\BDeploy\\root- using the example paths from above.","You can use the bdeploy-service-uninstall.bat --master command to remove the existing service registration and redo the registration with the above command in case you have doubts."]},{"l":"Connection to MANAGED","p":["Sometimes it is hard to wrap your head around how the network between CENTRAL and MANAGED servers works. Connecting a MANAGED to a CENTRAL server involves dropping the server information card on the CENTRAL server, which will fill all the input fields with values (URL, Port) as known by the MANAGED. This can differ vastly from how the CENTRAL server reaches the MANAGED.","Thus, when connecting a MANAGED server make sure to change the values so they reflect how the CENTRAL server will actually be able to reach the MANAGED server. This may include using IP addresses - depending on the setup even different IP addresses from what the server has if there are VPNs and NATs in place.","A good indicator whether the connection will be fine is if you can ping the target server from the CENTRAL directly (via a CLI, not BDeploy)."]},{"l":"Corrupted Installations","p":["If you suspect that the server or client application may be corrupted, you can initiate the verification process by clicking on the [Verify] button. This action will assess the integrity of the application files and provide you with feedback about the application state. The result will indicate how many files have been modified, how many are missing, and how many remained unmodified. If the verification reveals that the application has indeed been corrupted, the recommended course of action is to reinstall the application to ensure its proper functionality. For that click on the [Reinstall] button.","For server applications the [Reinstall] button will appear in a verification result dialog in case missing or modified files are detected. For client applications the [Reinstall] is always available from the top bar and context menu.","Applications can be pooled, i.e. the same installation directory might be used for multiple Instances in the same Instance Group, depending on the applications pooling configuration. Be careful when reinstalling applications, as they might still be in use."]},{"l":"General BHive Failures","p":["Failing BHive (the underlying storage of BDeploy) operations will typically show the text Operation on hive ... failed either in the UI or the logs.","If certain BHive operations within BDeploy cease to work as expected, it may be due to issues caused by interrupted operations, network failures, anti-virus software keeping locks on files while checking or even removing objects (depending on the product deployed with BDeploy, not BDeploy itself). To address this, users can utilize the [* Repair and Prune Unused Objects*] button, which initiates a filesystem consistency check (FSCK) and prune operations. FSCK operation identifies and repairs any corrupted files within the BHives, potentially resolving the operational issues you have encountered. Pruning any unreferenced objects from a BHive will clean leftovers from cancelled and/or failed previous operations, which could potentially be broken (and thus make subsequent operations fail as well) and consume unnecessary disc space."]},{"l":"HTTPS Certificates","p":["Certificates in general can be a tedious topic. However, there is no way around learning a bit about how they function. The BDeploy team suggests that you at least are familiar (i.e. read up about) those topics and terms:","PEM","Certificate Chain","RSA Private Key","Key Encryption","PKCS (#7 and #12)","Certificate Authority","Once you know about those, make sure you convert any certificate & private key combo to a single PEM file containing:","This file can be fed to BDeploy to install the certificate. All the conversions can be done e.g. with the openssl command line tooling.","The certificate must be signed by an authority which is trusted. This includes both the browser that will access BDeploy and the Java VM used by BDeploy. This is typically the case for all large official CAs, however self signed certificates issued by a private CA will cause issues and more work to get them to work."]},{"i":"connection-closedrefused","l":"Connection closed/refused","p":["Typically Connection refused, Connection closed, Connection reset and other connection related issues are not related to BDeploy. Please troubleshoot the network connection(s) between the involved parties."]}],[{"l":"Experts","p":["This chapter contains additional information for expert users, administrators of the system, as well as those that want to use the CLI for features that the UI does not provide."]}],[{"l":"Reports","p":["BDeploy provides users with the ability to generate reports."]},{"l":"Prerequisites","p":["To use the reporting feature, the user must have READ level permissions for the specific report they wish to view. These permissions can be assigned through the Administration section, under User Accounts or User Groups.","Assign Report Permission"]},{"l":"Accessing Reports","p":["Once the necessary permissions are in place, users can click on the Reports icon in the main navigation menu to view a list of available reports.","Report Browser"]},{"l":"Generating Reports","p":["Clicking on a report in the list will open a form where you can configure the report parameters.","Report Form","After setting the parameters, click on [Generate] button to view the report data. You will be redirected to a page displaying the generated results.","Generated Report","The generated report data is not stored. It will be lost if the page is refreshed. To retain the data, make sure to export it as a CSV file."]}],[{"l":"E-Mail Sending and Receiving","p":["BDeploy can use an alternative way of transferring configurations (and changes to them) from a MANAGED to a CENTRAL server. There is currently only one implementation to that, and that is sending an E-Mail with the configuration changes securely signed and attached to that E-Mail."]},{"l":"Sending","p":["E-Mail sending must be configured on the MANAGED server. The server will send out an E-Mail whenever the Save button of an Instance Configuration is pressed. The Mail Sending Configuration includes the commonly known suspects such as server URL, username and password, but it also requires two additional configurations to be able to transfer configurations specifically: The target recipient of the E-Mail and the name of this MANAGED server as configured on the CENTRAL server. This is so that the CENTRAL- when receiving an E-Mail - can determine which MANAGED server sent the E-Mail. This input field needs to correspond to the Name field of the server configuration on the CENTRAL.","Mail Sending Configuration","The recipient must be the mailbox which is configured on the CENTRAL server in the Mail Receiving Configuration."]},{"l":"Receiving","p":["The CENTRAL server can connect to a configured mailbox via IMAP and check for new incoming E-Mails. Those are processed automatically, and enclosed configuration changes are applied to the stored configuration on the CENTRAL.","Mail Receiving Configuration"]}],[{"l":"Storage Pooling","p":["BDeploy can be configured to use a dedicated object database to pool common objects from several BHives. This can be done on individual BHive basis, or be configured to automatically setup new BHives to use pooling."]},{"l":"Per-BHive Pool Setup","p":["Each BHive can have a configured pool directory, which must be non-existent or an existing object database. You can enable pooling on a single BHive from the CLI using:","In case the BHive is currently being served by BDeploy, pooling will only be enabled after restarting the server. The BHive Browser page in Administration will however show the pooling status as PENDING.","BHive Browser","Pooling naturally only makes sense if more than one BHive is configured to use the same pool directory."]},{"l":"Global Default Pool","p":["BDeploy can be configured to provide a global default pool directory which is automatically configured on new BHives (e.g. new Instance Group, new Software Repository), but not on existing BHives. This setup can be performed during init:","You can also setup the global default pool after init using:","By convention, the pool should be a subdirectory of the BDeploy root (i.e. what you pass as --root=/path/to/root) called objpool. This is the path used when --pooling is enabled, but --pool= is not given. This is not technically required, and the pool can even reside on different filesystems when set using --pool= during init or later using --defaultPool=."]},{"l":"Global Usage Threshold","p":["The global usage threshold specifies how often a certain object has to be seen in BHives participating in a particular pool. Only once this threshold is reached will an object be moved to the pool. The threshold can be set on the CLI, its default value is 2:"]},{"l":"Pooling the default BHive","p":["The default BHive created during init will be configured to use pooling if --pooling is given. Otherwise this can be changed using the Per-BHive Pool Setup later on."]},{"l":"Re-organizing Pools","p":["Pooling works semi- offline in BDeploy. Each BHive uses its pool as read-only additional data-source. The Pool Re-organization Job will (at some configured point in time or when triggered manually) re-organize pool storage by finding all objects eligible to be moved to the pool and doing so. Thereafter those objects are removed from their origin BHives. As a last step, the job will find objects in the pool that are no longer referenced by any of the BHives, and delete them.","Jobs"]},{"l":"Unpooling or disabling Pools","p":["Pooling can be disabled for individual BHives even while pooling is currently enabled. However, this operation requires to unpool required objects from the currently set pool back into the BHive local storage. You can do this using:"]},{"l":"Managing Pool through Administrative UI","p":["Pooling can be enabled or disabled through the BHive Browser administrative UI. Selecting a BHive will give you the options to enable and disable pooling. This is a little less flexible compared to the CLI, as it will enable pooling only on the globally set default pool - if there is one set. Otherwise enabling through the UI is not possible.","BHive Details"]}],[{"l":"Administration","p":["There are several components in the Web UI which allow maintenance of BDeploy. These are not to be used during normal operation by users. They are required during setup and to maintain current software versions of BDeploy itself if not done using the bdeploy remote-master CLI.","The administration dialogs are grouped into a Configuration, a Housekeeping and a Maintenance section."]},{"l":"Settings","p":["In the Settings area some global settings can be configured."]},{"l":"General","p":["BDeploy Settings","Gravatar support can be enabled here. If disabled, a generic icon is used for all users. Otherwise, BDeploy shows the Globally Recognized Avatar(or a substitute image) wherever a user icon is displayed in a dialog. Visit gravatar.com for more information.","BDeploy supports both built-in and external authentication mechanims. The built-in user authentication can be disabled completely in the settings.","At least one login method must be configured. Disable local accounts only if it is ensured that at least one administrator account exists via external authentication!"]},{"l":"OpenID Connect","p":["OAuth2 with OpenID Connect support is available if enabled and configured. The URL must be the token endpoint of the OpenID Connect provider. For example, the URL may look something like this on Keycloak, depending on configuration:","The Client ID and Client Secret are used to authenticate with the OpenID Connect provider, and need to be obtained from the OpenID Connect provider."]},{"l":"Auth0","p":["Auth0 is an OpenID Connect compliant authentication provider. BDeploy can be configured to use it through the Authorization Code Flow. Configure an application as \"Single Page Application\" in the auth0 tenant, and provide the required information in the configuration page."]},{"l":"Okta","p":["Okta is an OpenID Connect compliant authentication provider. BDeploy can be configured to authenticate users against Okta using its own proprietary authentication flow in a popup. Same as auth0, Okta requires a configured tenant which has application type \"Single Page Application\" set."]},{"i":"ldap-auth","l":"LDAP Auth.","p":["On the LDAP Auth tab, you can configure a list of LDAP servers which are queried when authenticating a user. Use drag and drop to specify the sort order in which the LDAP servers are queried for users that log on.","BDeploy LDAP Servers","Technical experts can use the Check action to test a single LDAP server entry: BDeploy tries to establish a connection to the configured server. Some logging information, especially Java Exceptions, are shown in a popup window. Similarly, the Test Auth. action can be used to trace the entire authentication of a user.","BDeploy uses simple bind to authenticate users. First, a simple bind is made with the configured User. This user must have permissions to list other users that should be able to log into BDeploy. This bind is used to query for a user where the Account User Field matches the user name to be authenticated. This can be any field like user, sAMAccountName, or even mail if you want users to log on using their e-mail address. Once the user to log on is found, its distinguished name is used to perform another simple bind using the provided password. Once this succeeds the user is authenticated and an according record is created in BDeploy. From that point on, permissions can be granted to the user.","BDeploy LDAP Server Configuration"]},{"l":"LDAP Server Properties","p":["A flag that marks the connection to be selected for LDAP Synchronization Job. If not selected, users and groups can be imported only manually via Import action in Admin UI.","A partial LDAP query expression used to fetch groups from LDAP e.g. (objectClass=posixGroup).","A partial LDAP query expression. Multiple filters can be written one after another. The final LDAP query is built by prepending (, and appending a filter which queries the configured Account User Field for the given user. This means that a pattern (field1=value1)(field2=value2) will result in a query like ((field1=value1)(field2=value2)(sAMAccountName=GIVEN USER)).","Account and Group Base","Account E-Mail Field","Account Name Field","Account Pattern","Account User Field","Description","Follow Referrals","Free text to describe the entry.","Group Description Field","Group Name Field","Group Pattern","Password","Periodically sync users and groups","Property","Root of the LDAP tree containing all user accounts (with group refs) to query. Typically in the form of dc=domain,dc=com.","Server URL","Specifies the field which must match the login name when querying for the user.","Specifies whether the authentication process should follow referrals or not.","The field which should be used as source for the description of the group.","The field which should be used as source for the Full Name of the user, which is used as a display name in User Accounts management.","The field which should be used as source for the name of the group, which is used as a display name in User Groups management.","The field which should be used as source for the users E-Mail Address. This is used for instance to query Gravatar if Gravatar support has been enabled in the General Settings.","The following properties can be configured for each LDAP Server:","The password for the User which is used to query other users on the LDAP server.","The URL of the LDAP server. Both ldaps://(with a proper certificate on the server) and ldap:// are supported. ldaps:// should be preferred where possible. Self-signed certificates are currently not configurable inside BDeploy(although they can be configured on the operating system).","The user which is used to query other users on the LDAP server (aka bind user).","User"]},{"l":"LDAP Import Users and Groups","p":["To ensure a successful operation of the Import feature, it is essential to accurately configure the following fields: Account and Group Base, Account Pattern, Account User Field, Account Name Field, Account E-Mail Field, Group Pattern, Group Name Field, and Group Description.","Once these configurations are set up correctly, the import process becomes a straightforward task. Simply click on the Import action button, and BDeploy will seamlessly handle the rest. Should any errors occur during the import attempt, the system will promptly notify you of the encountered issues.","For added confidence, consider utilizing the Check action before initiating the Import process. This will help ensure a smooth connection to the LDAP Server and preemptively address any potential issues.","Using the Check action prior to Import can help verify the connectivity to the LDAP Server and preemptively identify any issues that might affect the import process."]},{"l":"LDAP Synchronization Job","p":["The LDAP Synchronization Job periodically imports users and groups for LDAP connections with selected Periodically sync users and groups flag. The job is identical to the Import action. By default, job starts every midnight, but its schedule can be reconfigured via the CLI. To reschedule a job use ldap --root=... --setSyncSchedule=... where setSyncSchedule is in cron format (e.g. 0 0 0 \\* \\* ? for midnight). To check current schedule and last run timestamp use ldap --root=... --showSyncInfo."]},{"l":"LDAP Certificate Trust","p":["This section currently only applies to Linux installations.","If the configured LDAP server uses official certificates which are not trusted by the current JVM's default trust store, you can alternatively configure the BDeploy service to use the system cacert trust stores, which are typically available at a location like /etc/pki/ca-trust/extracted/java/cacerts. This path may be different on individual Linux distributions.","To use this trust store, you need to add these parameters to the command line of BDeploy:","You can do so by means provided by the Linux distribution, e.g. directly editing the bdeploy.service systemd service file or setting BDEPLOY_OPTS environment variable to that value either globally or in a service environment file."]},{"l":"Global Attributes","p":["In the Global Attributes tab, globally available attributes for Instance Groups can be maintained. Global attributes can be used to configure additional information for Instance Groups, which is then used as an additional grouping or sorting criteria.","BDeploy Global Attributes"]},{"l":"Plugins","p":["The Plugins tab can be used to manage the plugins known by BDeploy. Plugins that are currently loaded can be stopped here. Via the Upload Plugin action global plugins can be uploaded. Global plugins can also be deleted from the system here.","BDeploy Plugins Maintenance"]},{"l":"User Accounts","p":["ADMIN","BDeploy User Accounts","CLIENT","Meaning","Once a User is available, you can click it to open the User Details panel where detailed information about the user, including a list of their permissions, is displayed.","Only those Instance Groups for which a user has READ permission are displayed. Users with global READ permission can see all Instance Groups. The READ permission contains the CLIENT permission. The READ permission allows the user to read the Instance Group without making any modifications.","Permission","READ","The [Assign Permission] opens a popup for adding a permission entry. Global permissions as well as scoped permissions on Instance Groups and Software Repositories can be maintained here.","The [Deactivate Account] and [Activate Account] buttons allow to deactivate/activate the selected user.","The [Edit User] opens a popup for editing the main user properties, as well as changing the password.","The ADMIN permission contains the WRITE and READ permission and allows full access to an Instance Group. Users with global ADMIN permission have full access to all Instance Groups and additionally to the BDeploy system configuration.","The CLIENT permission can be granted to allow access only to the client applications of Instance Groups. Users with global CLIENT permission can see the client applications of all Instance Groups.","The User Accounts dialog lists all users known to the system, regardless of whether they are local users or LDAP users.","The WRITE permission allows a user to maintain the contents of an Instance Group without modifying the Instance Group itself. The WRITE permission contains the READ permission. Users with global WRITE permission can maintain all Instance Groups.","To protect against accidental lockout from the system, the currently logged in user cannot be changed, disabled or deleted.","Use the [Create User] button to create a local user.","WRITE"]},{"l":"User Groups","p":["BDeploy supports user groups. Their purpose is to simplify security management. By adding users to groups, administrators can efficiently manage access levels for multiple users in one place. All the permissions of an active user group will propagate to its users.","User Groups are managed the same way as User Accounts","The User Groups dialog lists all groups known in the system, regardless of whether they are local or LDAP groups.","BDeploy User Groups","Use the [Create User Group] button to create a local user group.","Once a User Group is available, you can click it to open User Group Details panel where detail information is shown on top along with users that belong to the group as well as the list of permissions.","The [Deactivate Group] and [Activate Group] buttons allow to deactivate/activate the selected group.","Use [Add user to the group] input to add user to the group. Enter user's login name and press [+] icon.","The [Assign Permission] opens a popup for adding a permission entry. Global permissions as well as scoped permissions on Instance Groups and Software Repositories can be maintained here."]},{"l":"All Users Group","p":["There is a special All Users Group that cannot be deleted or deactivated, but its permissions can be edited. Every user, both present and future, is automatically enlisted in this group. You can make any Instance Group/Software Repository effectively public by assigning READ permission to All Users Group for Instance Group/Software Repository of your choice."]},{"l":"Manual Cleanup","p":["All Nodes","BDeploy Cleanup Actions","BDeploy Cleanup Page","Delete Manifests that are not known by the master.","Description","If the option Auto Cleanup is enabled on an Instance Group, old Product Versions that are no longer in use by Instances of this Instance Group are deleted automatically. To avoid that a Product vanishes completely, the very latest Product Version always remains.","If the option Automatic Uninstallation is enabled on an Instance, Instance Versions that are older than the activated and the previously activated Instance Version are uninstalled automatically.","Instance Groups with Automatic Cleanup enabled","Instances with Auto Uninstallation enabled","Keep two BDeploy Launcher versions, delete all older versions.","Press the [Calculate] button to perform cleanup calculation. The result will be actions to be performed on Instance Groups or Nodes(including the Master). If no action is calculated at all, a corresponding message is displayed.","Press the [Perform] button to actually perform the calculated actions. The button [Abort Cleanup] resets the dialog without further actions.","Remove unused directories and files in the deployment (including pooled applications), download and temp directory.","Target","The dialog automatically resets itself after a certain timeout. This is to prevent execution of too old actions which might no longer be valid.","The dialog can be used to immediately trigger a cleanup and to reviewing of the actions performed before doing so.","You can use the Manual Cleanup page from the Administration menu to trigger a manual cleanup of stuff that is not needed any more. There is no need to trigger this manually as a job is scheduled that performs the exact same operation every night:"]},{"l":"Hive Browser","p":["The BHive page from the Administration menu is an internal tool for administrative purposes. It allows access to the internals of the BDeploy storage.","The table shows all available hives. The default hive is the internal storage where metadata about users and outer hives are stored. The actual data is stored in the individual hives itself.","It has the power to destroy everything- use with extreme caution.","Clicking a BHive opens the panel with maintenance actions","The details tab allows access to the Audit Logs and the content that is stored in a BHive. It also gives access to the repair and prune operations (see CLI) from the web interface."]},{"l":"Metrics","p":["This dialog provides a quick way to investigate potential performance issues in the server itself by providing access to the in-memory metrics kept by the server for all actions.","The SERVER metrics will show various system information about the Java Virtual Machine of the master hosting the Web UI."]},{"l":"Logging","p":["The logging page allows to view and download the master servers main audit log, which includes information about tools run on the root directory, as well as every request made to the APIs."]},{"l":"BDeploy Update","p":["The BDeploy Update page from the Administration menu offers a mechanism to upload new BDeploy software versions and deploy these versions ( upgrade and downgrade possible) to the running BDeploy master and attached nodes.","BDeploy System Software","It also offers a way to upload BDeploy Launcher binaries. These binaries are included within a full BDeploy distribution and are required when CLIENT Applications are configured. Usually, a manual upload is not required. In case launchers have been removed by mistake, they can be re-added this way. Use the [Upload] button to upload full BDeploy versions or Bdeploy Launcher binaries from the binary distributions ( ZIP)."]}],[{"l":"Command Line Interface","p":["BDeploy provides a rich CLI which allows automation of most interactions with BDeploy, e.g. for use in build pipelines, etc.","The same binaries used to run a BDeploy server provide a set of commands along with available options. This chapter describes the available commands. The options are well-described when calling the according command with the --help option."]},{"l":"Common Options","p":["--csv","--json","-o FILE","-op FILE","-q","-v","-vv","Description","Option","Output any data in CSV format.","Output any data in JSON format.","Quiet - no progress reporting on long running operations.","Redirect output to the given FILE.","Redirect progress reporting output to the given FILE.","Verbose - some tools may include additional information.","Very verbose - enable progress reporting for every tool, show timing summary at the end."]},{"l":"BDeploy CLI"},{"l":"Initialization and local Configuration Management Commands","p":["Allows changes to the basic configuration like hostname, port or mode. The init command stores the given hostname, used later on for connections to self and also for variable expansion. If the hostname changed or is no longer valid, this tool can update it. Please refer to Migrating between Modes in case you need to change the minion mode. Allows modification of the log root via --logData=\\path\\","certificate","cleanup","Command","config","Description","init","Initializes a root directory for running a server with the start command. The init command can be instructed to initialize the directory to run a master or a headless node when running the start command.","ldap","Manage the schedule at which the master performs background cleanup operations on all nodes(including the master itself).","Manage the server certificates (export the existing, import a new, set a separate HTTPS certificate). This is mainly used to import a properly signed certificate to the master, which serves the Web UI using this certificate over HTTPS. BDeploy itself does not require a properly signed certificate for internal operation to guarantee security.","Manages available storage locations. A storage location is a folder where the BDeploy master puts the BHives required to store data for Instance Groups and Software Repositories.","Manages LDAP synchronization job schedule and settings.","Manages object pooling related settings and the re-organization job schedule.","pool","storage"]},{"l":"Local Session and Scripting Commands","p":["Command","Description","login","Manages local login sessions to remote servers. This command eliminates the need to manage URIs and tokens yourself. Login sessions are managed per user, can be created, switched, and removed. Validity of the login session is the same as for the Web UI. Subsequent commands will use the configured remote login session to perform remote communication.⚠️ WARNING Since login sessions are persistent, it can be easy to confuse which session/server is currently worked with. Always verify that the correct session is actively used by commands when performing modifications on the server, e.g. deleting an Instance.","shell","Provides an interactive shell which can execute tools. The shell can also be fed with a script file which contains a series of commands."]},{"l":"Product Management Commands","p":["Command","Description","product","List or create Products locally. Fetches required dependencies from the given remote BDeploy server. Has the ability to push the resulting Product to the target BDeploy server."]},{"l":"Remote Server Management Commands","p":["Command","Description","List ports configured for a specified instance.","Manage Instance deployment ( install, activate, uninstall, updateTo(product version)) on a remote BDeploy server. ℹ️ NOTE The --updateTo command will only work if the new product version can be updated to without manual changes. If for example a mandatory parameter is added, or a configured application is removed from the product, the update will fail.","Manage Instance Groups on a remote BDeploy server.","Manage nodes attached to the remote BDeploy server.","Manage plugins available on the remote BDeploy server or install new ones from local jar files.","Manage remote configuration related to managed servers on a central server. Also allows to attach managed servers to a central server.","Manage systems on a remote BDeploy server.","Manage user groups and associated users and permissions on a remote BDeploy server.","Manages users on a remote BDeploy server.","Manipulate the process configuration (parameters) of a given instance remotely.","Query and generate Reports on a remote BDeploy server.","Query and manage application processes managed by BDeploy on a remote BDeploy server.","Query and manage Instances on the remote BDeploy server. Can be used to create, export(to ZIP) and import(from ZIP) Instances locally. ℹ️ NOTE Creating instances from a template requires a response file. The format is the same as the instances section of System Templates.","Query and manage products available on the given Instance Group on a remote BDeploy server.","Query and manage Software Repositories on a remote BDeploy server.","Query and manage system information on a remote BDeploy server. Allows to update both the BDeploy system software as well as the BDeploy launcher binaries.","Query External Software(which can be used as runtimeDependencies) on the given server and software repository.","remote-central","remote-config-files","remote-data-files","remote-deployment","remote-group","remote-instance","remote-master","remote-node","remote-plugin","remote-ports","remote-process","remote-process-config","remote-product","remote-product-validation","remote-repo","remote-repo-software","remote-report","remote-system","remote-transfer","remote-user","remote-user-group","Remotely manage configuration files for a given instance.","Remotely manage data files for a given instance.","Transfers External Software and Products between two remote servers (by fetching and pushing locally). Optionally can re-use an existing local BHive to benefit from object re-use.","Uses a product-validation.yaml file to perform a remote pre-validation of a product to be built in the future."]},{"l":"Server Commands","p":["Command","Description","start","Runs the BDeploy minion in the mode determined by the given root directory. Requires a root directory initialized with the init command.:information source:NOTE A _master is always a node as well. The master just has the additional capability to control other nodes, and provides the configuration Web UI."]},{"l":"Utility Commands","p":["Command","Description","bhive","Wraps around to the BHive CLI. Can be used to access BHive CLI commands if the BHive stand-alone binaries are not available. Usage: bdeploy bhive command.","payload","Internal use only.","schema","Used to generate YAML schemas and validate input files against those schemas.","verify-signature","Verifies whether the signature on a signed executable is deemed valid."]},{"l":"BHive CLI","p":["BHive is the underlying storage used by BDeploy. BDeploy serves BHives for all minions ( master and node), and has additional BHives per Instance Group and Software Repository on the master.","BHive itself does not know about BDeploy, it is 'just' a dumb storage backend which is responsible for de-duplicated, distributed, fail-tolerant (failure-recoverable) storage of file contents.","Much like Git, BHive only knows two commands that actually perform remote communication: fetch and push. All other commands are performing their work locally."]},{"l":"Analysis and Maintenance Commands","p":["Allows generation of new access tokens, see Security.","Calulate disc usage for given manifest(s) in a BHive.","Command","Description","du","fsck","init","Initalizes a new, empty BHive in a given directory.","Manage existing Manifests in a given BHive.","manifest","Performs a file system check ( fsck). This involves resolving all inter- Manifest dependencies, as well as re-hashing all objects in the underlying storage to assert that all objects in the storage are valid. Also allows to fix found errors (by deletion). After this, missing Manifests must be re-pushed from a BHive which still has the required objects.","prune","Read and diff Manifests from the given BHive. Allows to compare the contents of Manifests, view differences and the estimated data transfer required to perform a delta 'update' if a potential remote BHive already has one of them.","Remove unreferenced objects from the given BHive to free up disc space.","token","tree"]},{"l":"Filesystem Interaction Commands","p":["Command","Description","export","Reads a Manifest from the given BHive and writes its content to a given target folder.","import","Import a given folder into a given BHive and associate the given Manifest key with it."]},{"l":"Remote Server Interaction Commands","p":["Command","Description","fetch","Fetches the given Manifests from a given remote BHive.","push","Push the given Manifests to the given remote BHive"]},{"i":"server-commands-1","l":"Server Commands","p":["Command","Description","pool","Manages object pool configuration on a single BHive, re-organizes a pool against a set of BHive s.","serve","Serves one or more given BHives over the network. The same thing as BDeploy does internally, provided as CLI tool for maintenance reasons."]},{"l":"Launcher CLI","p":["Command","Description","launcher","Reads a given .bdeploy file, which describes all required information for the launcher to contact a BDeploy server and download a client application.","uninstaller","Uninstalls a given application and cleans up in the local storage."]},{"l":"Environment Variables","p":["A file containing the security token(as text content) used to access the remote BDeploy server.","BDeploy and BHive CLIs provide a set of environment variables that allow you to provide environment defaults for certain command line arguments.","BDEPLOY_LOGIN","BDEPLOY_REMOTE","BDEPLOY_ROOT","BDEPLOY_TOKEN","BDEPLOY_TOKENFILE","BHIVE","Description","Each command will include information for the according environment fallback in it's help output, for instance:","Path to the BHive to operate on for local commands (e.g. import, export).","REMOTE_BHIVE","Some common environment variables include (but are not limited to):","Specifies the name of a stored login session ( bdeploy login) to use. This overrides the currently active login session if there is one.","The actual security token used to access the remote BDeploy server.","The name of the remote BHive. In case of BDeploy this is usually the name of an Instance Group or Software Repository.","The root directory to use for init and start(primarily).","URL to the remote BDeploy server which commands should connect to, e.g. https://hostname:7701/api.","Variable"]}],[{"l":"Security","p":["BDeploy uses HTTPS everywhere along with advanced security tokens which allow mutual authentication for every request. Think of it as a combination of JWT and mutual certificate-based authentication.","This mechanism is used for every remote communication, especially for every remote communication which would cause a state change in BDeploy. There are some endpoints in the Web UI backend which cannot be secured by design (e.g. the one performing authentication and issuing the security token for all following remote communication).","As a consequence, a security token is required for all CLI commands that communicate with a remote BDeploy server, when registering a node with a master minion (as they communicate), and for all toolings which communicate otherwise with BDeploy(e.g. build integrations which fetch dependencies and push Products to BDeploy)."]},{"l":"Local Account Security","p":["2.1.1","2.1.10","2.1.11","2.1.12","2.1.2","2.1.3","2.1.4","2.1.5","2.1.6","2.1.7","2.1.8","2.1.9","Allow any printable Unicode character in password (emoji, spaces, etc.).","BDeploy implements the OWASP ASVS Password Security Requirements with a single exception.","Description","Fulfilled","Hidden password can be shown temporarily while entering it.","Minimum password length must be 12 characters.","New passwords checked against set of breached passwords.","No","No periodic credential rotation of password history requirements.","No.","Password change requires old and new password.","Password not truncated, consecutive spaces may be collapsed (they are not).","Pasting passwords from password manager should work.","Permit >64 characters, but not >128.","Strength meter for password strength hint.","There should be no specific requirement for password composition.","Users can change their password.","Yes"]},{"l":"Certificates","p":["BDeploy by default generates a self-signed certificate which is used to secure both the internal communication and the Web UI (HTTPS).","It is possible to re-generate the internal certificate in case there is a suspected token leak.","Exchanging the certificate will invalidate all issued security tokens. The ones issued to authenticated users, as well as the ones used to register BDeploy minions with other BDeploy servers.","It is also possible to exchange just the HTTPS certificate. This will keep all issued tokens valid while allowing to secure HTTPS communication with a trusted, proper, official certificate.","It must be assured that if this is done, there is always a valid certificate for HTTPS installed and updated before the current one loses validity, as the HTTPS certificate is not only used for browsers (frontend), but also for backend communication. Thus if the HTTPS certificate expires, BDeploy will essentially stop working."]}],[{"l":"Endpoint Proxying","p":["BDeploy supports proxying (tunneling) to application endpoints as defined in the app-info.yaml.","The application hosting the endpoint to call can be hosted on any node within the system. As long as this node is attached to a master you can reach (directly in STANDALONE or MANAGED mode, or indirectly in CENTRAL mode), you can tunnel there using BDeploy.","You will need the following information to be able to call an Endpoint of a remote application through the BDeploy public API:","A BDeploy slim token to be supplied for an authorization header in the form of X-BDeploy-Authorization: Bearer TOKEN. You can obtain this token from the Web UI for the logged in user.","The ID of the instance group hosting the application you want to tunnel to.","The ID of the instance hosting the application you want to tunnel to. You can see this ID for instance from the browser's URL when on the instance overview page for the instance in question.","The ID of the application's endpoint as defined in the app-info.yaml.","The ID of the application which hosts the endpoint identified by the endpoint ID above.","A typical proxy call using the public API would look like this, when using cURL:","X is a bearer token, which can be obtained from the Web UI (User drop-down menu).","server is the hostname (and port) of the BDeploy master. This may be either a CENTRAL, MANAGED or STANDALONE server, being in charge (directly or indirectly) of the application to tunnel to.","myEndpoint is the ID of the endpoint to call as defined in the app-info.yaml of the hosting application.","MyGroup is the ID of the instance group which hosts the application to tunnel to.","xxxx-111-xxxx is the ID of the instance which hosts the application to tunnel to.","yyyy-111-yyyy is the ID of the application which hosts an endpoint with the given endpoint ID."]},{"l":"Obtaining required IDs","p":["There are two ways to obtain required IDs. You can use a purely manual approach and for example deduce ID's from URLs and the Web UI itself. Or you can use the public API to query BDeploy for available objects.","From the above URL, you can find the instance group ID( MyGroup) as well as the instance ID( xxxx-111-xxxx). When on the instance dashboard, click the server application you want to tunnel to. The process control panel for that application opens up, and you will see the application's process ID displayed.","Last thing to manually lookup is the endpoint ID. Endpoints can be accessed on the instance configuration page by clicking on the application you want to tunnel to and then clicking on [Configure Endpoints]","Application Edit Panel","You will be able to read the endpoint ID and configured properties of the endpoint on this page. The configuration will be used by BDeploy when instructed remotely to call that endpoint. BDeploy will take care of things like authentication, security, etc. The actual caller will only require access (and permissions) on the master server they are calling into, not to the actual application. Instead, BDeploy itself is configured to be authorized to perform the call.","Application Endpoints Configuration","For automatic lookup, you can use the following BDeploy public API endpoints. Those are provided by the master server, same as the actual proxy endpoint:","X in the following cURL calls is the bearer token as obtained from the Web UI.","MyGroup is the name of one of the instance groups as obtained by the first API. You can fetch the ID of each instance from the returned JSON.","xxxx-111-xxxx is the instance ID as obtained by the second API. The returned JSON will include the application ID hosting the endpoint along with the actual specific configuration of that endpoint (including its ID)."]},{"l":"UI Endpoints","p":["UI Endpoints can be defined to allow simple access to hosted web applications in a similar manner to client applications. This means that BDeploy will provide a link to the web application in much the same way as it provides access to client applications in its own UI, both on the (server) process status panel, as well as on the client applications page.","The permission to access a UI endpoint through the BDeploy UI is CLIENT.","A sample UI endpoint definition may look something like this in the app-info.yaml:","The difference between path and contextPath is that while path defines the root of the server hosting the application, contextPath may be used to add more path segments to the link generated by BDeploy which leads to the application entry point. The contextPath is used only to determine the address to open when the application is opened through BDeploy.","The enabled flag controls whether the endpoint is configured and visible to the end user. The expression is evaluated against the current configuration, and the endpoint is hidden in case the enabled condition evaluates to null, empty, false or cannot be resolved at all."]},{"l":"UI Endpoint Proxying","p":["Much like \"normal\" Endpoint Proxying, BDeploy also provides proxying for UI endpoints - when enabled using the proxying attribute on the endpoint. A UI endpoint will be reachable on any participating BDeploy server ( STANDALONE only or CENTRAL and MANAGED if used). BDeploy handles all the traffic from and to the actual web application. There is no direct access to the actual application required.","This feature is intended for simple use cases. Advanced use cases may not work as expected (e.g. WebSockets). BDeploy uses a simple request/response wrapping internally to forward requests and is not a full HTTP proxy.","Only users which are logged in to BDeploy can access UI endpoints via the proxy mechanism."]}]];